%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 2011.i203.010.P.m004.c33.hobby cartoon set-06.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 1/28/2021
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 6 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2011.i203.010.P.m004.c33.hobby cartoon set</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2021-01-28T08:36:30+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2021-01-28T08:36:30+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2021-01-28T08:36:29+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>248</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA+AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FUk85y6nH5euW01&#xA;zHcfCGdPtiMsA5Q9iBvXsMpzmXDs5GljGWQApF+VcV0mn3rGT1bGSRGtX5K9X4n1N1JH8uVaWJAN&#xA;uT2jECQruZxmW652KuxV2KuxV2KuxV2KuxV2KpXrPmCDS+IeGSUkF24UACLuxqepA7fqzHzagYzV&#xA;JpMJLiKOAzs37oDlyG+x6Uy+1AtBSX0d5Zc7aRk/exoxGzANIqn8DgJsMjAxO6V2t3LLrd/pjy3C&#xA;m1iEkb8xRvGuw7MtPpzFhmvJKB6MRLdPrB3ksbZ3JLvEjMT1qVBOZceSnmr4UOxV2KuxV2KuxV2K&#xA;uxV2KuxV5h5E86edNY12H6/wGm3pmf6s8BWSCNQxTi68a78RVq9cpjkuVOxz6SMMfF1engg9DX+z&#xA;LnXOxV2KuxVIfM+pNDGLVSVWUFZitORVwRQV6ZrNVqJ+J4cOdX9rmaaAFTPQpZ5YvjZzppyMzW1a&#xA;lZCGYNI1AQak9fE5Xj1GTHKInVSNbN+pIzEyAogMxzbusdirsVdirsVdirsVdirsVdirH9d0Rr/U&#xA;4K3EwDxyUUCMogQLtuh+0TvyrmLmxcUx7ikSpE3dqy+XFsZ5qXHoJGHU0JkQClDttyHXDOYxwAka&#xA;PJu0w9YNWBzSjy3bvFoxjkkdJ5Z4GEbOrOoEygNWrr7/AMMhgzQl6Qd3L1+87A2pE29/YT63e2aX&#xA;Nz9ejiIcusYDBSQwAEdANlNe9cjjOM5ZEXx04XHIxqvSnmmf8c202p+5j2/2IzNjya5c0ThQ7FXY&#xA;q7FXYq7FXYq7FXYqxjz351h8taXNLEqz6h6TywwtXiAgJ5PQg026V3yueQRIHUufo9BLNGU+UIA/&#xA;dyeRQ/mfCL2G7V4ry/uJ4xNHKGEYWVwJQgUJx26VY/TlAEgSSHbzxafJCMBLe4j3d70vyl5i02fV&#xA;ONlG1tDdn05bV25BZ1TnyQ1J4ldu34Y4sg4qHItPaGgnDGeI8Rj18mc5lvPuxVIh5y0p1Z4I554l&#xA;rWVE+DbvViu2Y51UAatuGCVWxjXvMNlqtwfqStIlBHItAzFi23EKWqPh65iSxjxvE7405mOH7k94&#xA;KC0u+TTtQEk8bwoZIvVDoUb4WqKc+PyyOXEJSib+k2nHH93Inu+9nA826QbiGAvSSd1jSpQ7saD7&#xA;LE9czYaqEjQO7ruHzTnMhi7FXYq7FXYq7FXYq7FXYqhNWv2sNPmvBEZhCOTIDT4Qfibv9kb5Xlnw&#xA;xurbtPi8SYjdWwl/O1rqN5OkkZjW2jDmVD6sNGNAOQoak+K/qOc92jGc5CZ5cqdvm0v5WFnkfxy3&#xA;Q2g6xd3Fy8UtA8dZ4pT0qGHAe+34ZhAmBEo9HX6fMZ3GXVlVv5ZUaw+tx3X7+5hMTI0Y4hZKMStC&#xA;CD8PeudZCIPqHVGTVzOMYj9MSnltCILeKEHkIkVAx6niKVy0BxCVTCh2KuxV2KuxV2KuxV2KuxV5&#xA;f+Y3lIyQ6nqWo3Ci2nVlS5LlTEGTigZKryCk1ovWm+YsscuLi5u/wdoQ8Dwh6Nq5fP5vF/LnlG+s&#xA;/N9k88AvbSzuIZ7iSArLGYuYblSjcl8V417ZeDYdXkmMcq4gD7/0vqLRtL8tfBqel2VvE0oIWeKI&#xA;RnYlWAHFSNxQ7YREDo1S1eTJGjIyj70Ra6m0+q31gYGjWzWFlnLKVk9YMTxUHkOHGhrknHEgTXcq&#xA;6nN6Gm3c249KGR6jr8KE98EuTMc3mOnfXnsI2kuGSNto5liMzAA8QKghOQPzP0dNLk0UJSs3Xd0d&#xA;vh4iNjH9KU3uiixupfrF7dJBet6dz6YEdwnA8uSCUPxB9T9nY5mx2A25NJkY2AQb7kHf2VikSWtj&#xA;e39zas/qiW6dA5dDRgjoisFH7W/9p47Kgy4K/hZXqvl600zT01CESm4haNo6yBuLVBrQoOw8crjE&#xA;A2AGgAPTIpFliSVfsuoZfkRXNi4i7FXYq7FXYq7FXYq7FXEhQWY0A3JPQDFWEx+ddVvYJZY9Ohey&#xA;PILzZm5KKg1UA9s1ebtOMJcJDm49KSLumAXVzpiuP0dZDTlZiblI55ysq/ykeqoFMtnGMhuPx8XJ&#xA;nq8shUiD74j9SbSajb6fO1wX9YcSkacxxRCK7NQfsintlGp7Ngfp2t1egz8RJkfWOQr8fJHD8wzr&#xA;RWBJILVIf3sE8LcyHQUAPxce+HWznwDhG4LljRmQ4iaHezrytrq6zpS3RAWVGMcqj+ZdwfpBBzY4&#xA;5Ex35uLONFN8sYOxV2KuxV2KuxV2KqdxL6UDyfyqSK+PbIyNC0gWXlDaH5gvtYuJ7q6hNn9akRzI&#xA;jpKIjGPQES7q/wAQ+Ji2/hmpzaWM/VZvZtnjBKuLi1gkvYrm2mlm9dzE7ozDgoCoFIHQBdsxNZgy&#xA;TkDHl73YYZxiN2PXLajb+tNZwXLtIxpGgRW4M1afHRQBTNnpyYRAJ3pxNRijk2I2tOvLS6tLYXsM&#xA;bXFncSJE8chEfJHBPIfGskVSKA7HHLIncc2IhwxqKJ8s23mbT/OE19qV+bixmi4Q26q1UbmpPIhF&#xA;TcBt698YTAPLdeGx5vTLy1ju7Sa1lLCOdGjcqaNRxQ0OZ5FuODTFv+VbaaoYRXlwtexKkfSKDIRh&#xA;XIoyCM/qFqB/K3Ty5f6/PU+y4DivmWcJiIoClab8trO4MX1i/nkEC8IaBFKg0HWm/TvlUNJCJJHM&#xA;t35qXDw9FRfy40sjjPe3kybfu2kXjt4jjlnghr8Yspt4I4II4IxSOJVRAd/hUUGXANRX4q7FXYq7&#xA;FXYq7FXYq0yq6lWFVYUI8QcVSlfKXl5WLJZqjHqVZ1/U2VSwQlzFsxlkOqweS/K4NRYID48n/wCa&#xA;sl4ce5fEl3tr5N8sKSRp8ZJFDXkf1nHw4r4kly+UPLKgBdOhAHQAUGPAO5eM96PstOsbGMx2kCQI&#xA;xqyoKVPSpyQAHJiSSiMKHYq7FXYq7FXYq7FWpI0kQo6hkbYqRUHEhUP+jNP/AN8J92Q8OPcy4z3u&#xA;XTNOUbW0X0oD+sYeCPcvEe9v9Haf/wAs0X/AL/THgHcvEe936O0//lmi/wCAX+mPAO5eI97v0dp/&#xA;/LLF/wAAv9MeAdy8R70RkmLsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirH/N3mp9Cih9G2+sz&#xA;zcmCs3BQqUr2PI79BlGfNwchbl6XSnLe/JMdB1ePV9IttRjjMS3CkmMmvEqxVhWgruvhk8U+OILR&#xA;lx8EjFH5Y1uxV2KuxV2KuxV2KuxV2KuxV2KsC1f83dL03VfqL6fcOgfg05KLUBirOi1PIVHcjMc6&#xA;gXTsY9mzMeKxytnuZDrnYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVsj8ELeAyMjQtIFlCRTymcEtVW2&#xA;K9uvbMeGQ8TdKApGkgbk07fftmU0JZLr1qmuwaOAXmlR3dgdkKjkAfmtcxzqR4gx9UWqa5rNto2n&#xA;NfXCSSRq8cYSJeTF5XEaDcqoqzDdiBmQyAt5vfXnmy/luoNftktp4JlmsELwyrGrliYuUSgsOHDd&#xA;t6+PavJAyDfp9diwzqRPwZv5T1a1ms4dOEYhubeIFkT7DUNGZa79TU18cnGNCnFlqo5ZyIv4sgws&#xA;nYq7FXYq7FXYq7FXYq7FXYqwvy75+0+V/Mceo3IiHl2XheyOCFADOpZaks1Wj2FPCnXIxBHNslDY&#xA;V1/HeXmmkfmb5APnOW4vNOki0v1Gmtb2RFZkkLcwXiQEhQzudiT0OVjEOK3PnqJHHwjm9203UrDU&#xA;7GG/0+dLmzuF5wzxmqsOn4HYjscudYQicVdirsVdirsVdirsVdirsVdirsVeJ/m3o2qaz5kuYPrb&#xA;o0MUC6TGJOEahxWXku1WdgfeijKcmThPk7PR6cZIH+cyH8pvOV7rfl/UNL1mf61rOkyGGSSqkyRN&#xA;tG3IU5FWqCaeFdzhmRwlxJ4+GdMwt4GinikkPJQw5Dw9/ozEhtIWzluEX5gjWTRbxXR5FMZ5JHTl&#xA;Qb1FSOnXrmTqReM+5wy810ibU5NXg+oSmXUZ6iC4l+Jkg6cmDAio+IHr+rNFi4+McBuR6sA9L1cE&#xA;WUQJLEXNoCxpU/6THvtTOkbQwrXija1eMh+H1KUrXcAA/iMEJXfvcLtDCMco1/FGz8z+hV8ohzr0&#xA;bdQvqL06KYw1fvIGQlI8YHSnN0OKB00pkesSq/kz/LEOxV2KuxV2KuxV2KuxV2KuxV4H+aX5ZeZJ&#xA;fNOpajozxR6LqapcalI0yRpC0YBlMsZbm4qnq/Cp3PTA5OO65PKtD0pdQ1ywsroyxWc86JdSxIWd&#xA;IifjZRQ/ZWp6YDIBu8OZ2A3exfkDpfmi01TUpE9dfKciv6LXURh9aYOFjkjjLNRuCnmVJHbcgUIc&#xA;fN583t+FodirsVdirsVdirsVdirsVdiqnJcW8Tokkio8lfTRiAzcRU8R1NMBkBzZCBO4DynzHYa/&#xA;qPmS71ODSJQksYtkZXZS8cZPCRlJoGIYjp028cwsmQyL0+ixabFjFz9Z57/Yhfyo0zSNJ82ajbPC&#xA;1tf30fpxRh6qhiYyPHxAoOQAI3/Z2yzHLi9JcftPRQjAZcX09fi9M06Y3OpanasOK2EscaMOrCSB&#xA;Jan6XpkxgDpDkNJheT26xtFL8XqKVZB/KdjksswBR6sIwJeMec/N+h+VLn6paPcfXxMs9lVwI0Rq&#xA;CR5OIYGvGihR88wcejj0JFHZRgTPUfz88n3WmokTyLdfWLckNG1AscqSPJsD8ICnatfbM8mXc2wx&#xA;C9+TG9X/ADM8rz3Q+oar6KJERJJLZyTerMGZi4YSwtRqgBSo6dcGO4iqY6vBHNPiJ/sRukfnJoGl&#xA;xMbJX1bVrpY4La2Ef1cCTlxYtIxfaQkEAdKCp8BEEEkt/hjhjjhyH2l6bo3nnSr9o7ZFma9JVZIQ&#xA;oPB2/ZJDUPHua4Y5Awz6SeP6hTJstcV2KuxV2KuxV2KuxVC6rfCw0+e7I5GJaqu+7E0Ube5yMjQt&#xA;MRZYLZebvMVvPPLMY5raaR3ihclygah2kUR8VHQIVNP5zmFDWiUjEc3Llp6FpMPMFrdwSx6lprSG&#xA;VnMgiVSDzO9S3xV+nJeJ+Kdlm0pMrhliI0P46+ykv0nSNAuNYuS2lslu/ptah24qnAfHzqeO58MP&#xA;He1fY4+fDLHAS8YE9Rx/KtmRQecNX0yK+U20FrArlkkZXI4KgjDCjKrfDGDXoTko5CGGpxxIhUuI&#xA;8O+99Sf0si8m+arvV6w3sfCQRLJDL6bxeqvQuAxZSD1HFiPDLceS3ByQplOWtTsVdirsVdirsVdi&#xA;rum5xV51eectWudVtru2mW2sLd3DWnKOsynYeoWO3iKAZiy1cBsbv3FuGmyHlw176Ktb+YU1LzDZ&#xA;terHFJbpI0M0cgCFXUrwdQ7gnw3+jfKzmjkG33U34xPHExJBEu5rV9Wv7bVi9vqCegor6BAkQ1r1&#xA;oVb7jko4iRaPzuOP7oxHF/OJqvvYfFq19B5kj1V7cc4ZGkIB2ckED7JamzZCIIlbus2sw/lvCgeK&#xA;wzPyj5qkuvMd2k1v6Y1VxJzFeKtFCI1AJ6hhCfpyzBq45Ds88Y3Gwn7+Vi0ssv1+blMayEhTXwB9&#xA;hlpw31UZaSq//KzQNQcSXtLmQCgeaNJCATXq4bvhGKuq+KUBcfkh5LnjCNbolDXlFEkbfelMIge9&#xA;fFKqPyY8mgAC0goBTe3iP4kVx8M96+Kvg/J7ynBMs0UEcciGqukMSMD4hgtRg8PzTHOQbHNP/L3l&#xA;HSNCeWS0VnmmNXlkNW8aDJQxiLPUarJmNzKd5NxnYq7FXYq7FXYq7FUNqGn2t/bm3uk5xEhqVI3H&#xA;TpglEFINIAeVNJ9Ew/vDEf2C9R9FemY35PHxcVept8eVUo/4J0D/AH03/Bf2Zd4QY+KWx5L0IfZj&#xA;dfk5H6sfCCDkJXt5R0h5BI/rO4pRmkYkU6UPbHwop8WSvYeW9HsJ1ntYeEqAqjcmNARTucIxgGwi&#xA;UyeaZ5Ng7FXYq7FXYq7FXYqoX8M01jcQwsEmlidI3PQMykAmnvgPJI5vOpPy68w/VjbBrJkbrJQ8&#xA;6eHIqDmvloiZ8Vn3Xs5g1IEaps/l/wCY/qn1YJY05cvVp+8+XPiTTL/BLX4wXxeQ/M8cYRXt1UDY&#xA;BzT/AIhl8eICqcDJpozkZEndSt/y01xZld3tiF34sxINO3924/DKfBLsBmiDyTKy8i65De2kzz2y&#xA;RWsyzKI+XLZuRFPTRfuAynHohHIcnUsp6kGPDWzO8z3DdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;diqjdXdvaoHmbiCaDuScSUxiTyXwzRzRrJG3JG6EYqRS/FDsVdirsVdirsVdirsVdirsVSXXfOvl&#xA;XQLmC11jUobO4uByijckkrXjyPEHite7fwxSIkpzHIkiLJGweNwGR1NQQdwQR2xQ3irCPO35raV5&#xA;U1JbC4sLu7b0lmmlgUcI1YsACWK1Pw9sBkBs2QxGQsMxs7u3vbOC8tnEltcxpNDIOjJIoZTv4g4W&#xA;tWxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVh/wCYbXbWSGzvDBJEavHHwZyDsahklIG4345V&#xA;l2Dm9n8MsnD/ABJp5NE66FCtxP8AWJd2aQhQ3xfFRlQAKd/DJY+TTqTHxCB02TzJtDsVdirsVdir&#xA;sVdirsVdirsVfP8A5x8u+aNX/MK+l1azcx+r6GkXiRhokgViY+XDl051JPxfqzHzT6W7DTiIjb13&#xA;VrxtD8ooumOJHsoY4Iajkx9NOIFPE8fDI58/BEEHqA0YcXHOiraTqF+dUWxuL62vh9XeR2gUKyuj&#xA;ovxUZuvM9hlsJ31BapxrpTBPzRttE1XWYHWZJp40WzuULhEQM7EMWIYHjyYMB0r9GVZZAnYu10mi&#xA;zcF8Oxeh+WtR0S60uCHR5AbWzjjgWE1DxqqgIrBt+g698yITEhs6/U6XJhlUxSa5JxnYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYqk/mqe/h0tms+VSaOyfaAptv2BPfCHH1MpCOzEJbV4LW1uhceuLtS5&#xA;CrxEZqA6kEmtDscduTgmJhUgVbRb26tbuK9U0gkuPq0qdSwPCpbvt6gK4WWGRiQehNPQci7R2Kux&#xA;V2KuxV2KuxV2KuxVZPJ6cMkn8ilvuFcBOyQN3ng85adNO626yXagirxIzHfufDfxpmtdgcRCOb9F&#xA;6zpMVyBczWouDHLGE4cihMbotaEjrQj78rygWBR2kPcxxTIs+StrOrS8pbvT7SaKZtPlEJKAMxlm&#xA;hUOvEtXiGrmfKVCwOidDijPLGMz6b3+Fl5bNFdQyTRXaenOjp8B3IDcHHTvRt8wyKL3WLKJxscrZ&#xA;f+V73UXmF42RxHcWsrGtQCEkTi/vTlQfPMjTc3Sdv8MsIN7iX69nquZjyDsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVYNJ+ZEhuJPQ0uS5skZ1aRBIxIFKEFY2TxJFe/scoOZu8HZjo8zWl/qSNY2qxW1&#xA;xKqtESvH4qI2440ofuzXzwTOfjBofj7P7HKnOJw8BF7Ir63d2F4Lg2bXUcMw4QiQRq84p6dXo4/l&#xA;+n7sz/zBHMOtho8e3CTfW+9H2nnLW08yQT6hKkNhdKLafQ+cTvZzllpMZVjV5FKg1q1N/lkvGDke&#xA;DLhutvd3PQsuaXYq7FXYq7FXYq7FXYql2v6sul6ZLdGnOqpED05uaCu42HU79MrzT4Ik9zPHDikA&#xA;wa8u7ufWfq0EkV7czjmXUrSPbfnSnQUPjms0+Y5LM/scvLjlEDhPzDI4zcQafFbOvqukyu0gqK06&#xA;/Dv+vIiRAqv8paxj3n+FCX8si2cQe3YqulTQMTUAORHTcDY/BXxzPGQEgV5NE7iDIHcbvL7WzvEu&#xA;Z7aSxumiCsYpt6FkdERDsdiPiBr2xOKuluXi7YnwgRyCHlQ5/EM5/Ku8Nvc3Gm3XNrmTm8TM9VQK&#xA;RWNVptXdia/R4yxCjTTqdQcw4uh/FvScyHDdirsVdirsVdirsVdirsVdirsVdirsVU7mOSS2ljib&#xA;hI6MqOdwGIoDt4YCoYJD5B8xQoI01CExg7KedOvy2+/MU6Zv8UKd9+W+rXM7zLc28Rc1IUyHf7hk&#xA;hgIT4wWS/l15nfTv0euqQJbFufEK1QfEGlcPglHiDua078r9Ws1mH6Qidp1CNI4d2Cg1FCOHTK8m&#xA;l4iCTVN35w8PB/CHoyBgoDHkwA5HpU5mOE3irsVdirsVdirsVdiqT+afL7a7YR2guPq4SQSmqcwx&#xA;CkAHdf5shOPEGcJUWG2n5PvaXMlzbamYp5TydwJftDuAZKA5A4ierZ43kyUeWtUNuq3V8080Qosk&#xA;FYGYf5W7AkeO2Uz0xPIso5glup/l9qF9dxXKatLAEjKNCxMgbkankQU+7+uCGk6nmk6jaq2UB+Wm&#xA;of8AV229kb/mvL/DPe03D+aEdov5fNpmpw341FpWhYsV9LiW5AggsXbrXDHFRu0nJtVMwy1qdirs&#xA;VdirsVdirsVdirsVdirsVdirsVf/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:3d21faa6-4274-4c43-a06b-c2bb356bd68e</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:3d21faa6-4274-4c43-a06b-c2bb356bd68e</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:84552029-76b0-4f5f-80b0-85c27c6d22f7</stRef:instanceID>
            <stRef:documentID>xmp.did:0a85c921-d378-3041-9e03-1449f8515011</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:20e62192-36ba-3347-bcae-769320275826</stEvt:instanceID>
                  <stEvt:when>2018-05-03T18:06:04+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c424c365-8ca7-7e43-b231-34dbea1637f2</stEvt:instanceID>
                  <stEvt:when>2018-06-23T21:19:57+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c5293035-29a7-bb4a-8f6a-8390237c98fb</stEvt:instanceID>
                  <stEvt:when>2018-06-27T22:05:34+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1e357180-11d8-d84e-a011-b3dba0616392</stEvt:instanceID>
                  <stEvt:when>2018-10-28T20:55:32+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:01157d51-0f1a-934d-8810-22d6c9481b2a</stEvt:instanceID>
                  <stEvt:when>2018-10-28T22:24:22+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:97f0c655-e103-5f49-85a5-1e172631c217</stEvt:instanceID>
                  <stEvt:when>2019-07-24T08:33:09+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:212f2746-30b7-ae42-bab5-97794ced555f</stEvt:instanceID>
                  <stEvt:when>2019-07-26T23:33:45+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9c1a8738-6ef5-384e-adaf-734992b0ade4</stEvt:instanceID>
                  <stEvt:when>2020-11-28T09:31:13+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0a85c921-d378-3041-9e03-1449f8515011</stEvt:instanceID>
                  <stEvt:when>2021-01-28T06:01:30+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3d21faa6-4274-4c43-a06b-c2bb356bd68e</stEvt:instanceID>
                  <stEvt:when>2021-01-28T08:36:30+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
351.852 306.89 mo
346.248 306.89 li
346.248 222.089 li
351.852 222.089 li
351.852 306.89 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.4 .305882 .329412 rgb
f
384.694 189.588 mo
381.892 177.821 372.405 162.598 373.406 158.115 cv
374.406 153.632 380.678 140.229 381.052 133.131 cv
381.425 126.033 380.495 103.667 378.627 101.425 cv
376.759 99.1839 367.419 96.9424 363.684 93.9538 cv
359.948 90.9649 360.509 82.7466 360.509 82.7466 cv
337.624 82.7466 li
337.624 82.7466 338.185 90.9649 334.449 93.9538 cv
330.714 96.9424 321.374 99.1839 319.506 101.425 cv
317.638 103.667 312.782 126.033 313.155 133.131 cv
313.529 140.229 322.303 153.632 323.303 158.115 cv
324.303 162.598 314.65 178.755 312.782 189.215 cv
310.914 199.675 308.4 210.881 311.134 216.859 cv
316.312 228.181 381.751 228.335 386.999 216.859 cv
389.733 210.881 387.155 199.925 384.694 189.588 cv
cp
1 .933333 .843137 rgb
f
384.694 189.588 mo
381.892 177.82 372.406 162.598 373.406 158.115 cv
374.406 153.632 380.678 140.229 381.052 133.131 cv
381.064 132.899 381.07 132.646 381.071 132.374 cv
347.24 143.592 320.791 135.232 313.141 132.744 cv
313.144 132.878 313.149 133.008 313.155 133.131 cv
313.529 140.229 322.303 153.632 323.303 158.115 cv
324.303 162.598 314.65 178.755 312.782 189.215 cv
311.939 193.935 310.966 198.806 310.401 203.282 cv
314.319 192.998 329.21 163.865 349.105 165.912 cv
368.33 167.89 382.878 191.529 387.149 200.764 cv
386.486 197.133 385.583 193.32 384.694 189.588 cv
cp
.941176 .866667 .756863 rgb
f
363.684 93.9538 mo
359.948 90.9649 360.509 82.7466 360.509 82.7466 cv
351.968 82.7466 li
352.307 84.4534 354.449 90.8917 357.797 95.3547 cv
362 100.958 378.627 101.425 378.627 101.425 cv
376.759 99.1839 367.419 96.9424 363.684 93.9538 cv
cp
f
222.518 181.646 mo
225.546 188.495 220.465 196.209 220.022 203.245 cv
219.811 206.608 219.908 211.788 223.988 212.635 cv
224.582 212.758 225.006 211.927 224.42 211.612 cv
213.85 205.922 229.135 189.308 223.202 181.246 cv
222.898 180.833 222.311 181.178 222.518 181.646 cv
cp
.4 .305882 .329412 rgb
f
226.852 145.594 mo
231.149 140.473 235.004 136.406 242.202 135.95 cv
249.218 135.506 258.572 137.516 259.697 145.884 cv
259.812 146.735 261.105 146.476 261.14 145.689 cv
261.457 138.406 252.66 134.465 246.522 134.412 cv
238.131 134.341 230.14 137.197 226.495 145.318 cv
226.399 145.533 226.672 145.808 226.852 145.594 cv
cp
f
253.178 132.938 mo
256.39 133.588 258.848 136.968 259.623 140.03 cv
260.361 142.945 258.192 144.262 257.454 146.786 cv
257.25 147.485 258.094 147.844 258.585 147.444 cv
261.156 145.344 262.213 142.088 261.018 138.998 cv
259.793 135.831 256.948 132.275 253.254 132.377 cv
252.945 132.386 252.851 132.872 253.178 132.938 cv
cp
f
283.277 167.654 mo
284.408 180.777 308.661 201.974 292.477 213.513 cv
291.73 214.045 292.38 215.229 293.208 214.763 cv
310.739 204.898 286.685 178.508 284.004 167.556 cv
283.907 167.159 283.241 167.231 283.277 167.654 cv
cp
f
260.845 141.265 mo
260.845 141.265 239.854 128.474 222.804 148.329 cv
208.247 165.28 223.761 182.506 225.774 189.682 cv
228.24 198.469 216.79 205.321 226.047 219.293 cv
231.028 226.811 235.869 235.827 263.716 234.917 cv
284.179 234.249 295.024 222.377 296.579 209.848 cv
297.695 200.857 294.259 195.647 289.959 186.801 cv
285.727 178.096 283.688 160.878 279.056 152.627 cv
274.775 145.003 265.67 140.56 260.845 141.265 cv
cp
f
224.911 219.214 mo
215.024 222.122 204.971 239.866 196.85 257.525 cv
188.73 275.184 183.577 290.406 193.766 294.937 cv
208.046 301.288 221.931 270.101 226.583 259.633 cv
231.236 249.165 224.911 219.214 224.911 219.214 cv
cp
1 .443137 .478431 rgb
f
180.028 258.094 mo
179.043 256.534 178.226 254.189 177.072 254.317 cv
175.594 254.481 175.923 257.766 176.662 258.915 cv
177.4 260.064 180.028 258.094 180.028 258.094 cv
cp
.94902 .568627 .576471 rgb
f
197.795 295.835 mo
181.018 296.284 166.978 276.961 165.41 269.12 cv
163.556 259.851 173.494 255.824 181.235 260.929 cv
186.745 264.563 198.199 272.464 203.009 276.081 cv
207.486 279.449 206.856 295.593 197.795 295.835 cv
cp
1 .443137 .478431 rgb
f
219.613 274.057 mo
218.765 271.246 215.142 259.756 212.899 260.878 cv
210.345 262.155 214.176 287.185 200.639 286.419 cv
187.103 285.653 181.739 263.688 181.739 263.688 cv
182.01 261.442 li
181.742 261.264 181.481 261.091 181.235 260.929 cv
173.495 255.824 163.556 259.851 165.41 269.12 cv
166.978 276.961 181.018 296.284 197.795 295.835 cv
198.319 295.821 198.814 295.752 199.282 295.637 cv
207.024 294.309 214.295 283.853 219.613 274.057 cv
cp
.819608 .360784 .423529 rgb
f
177.507 267.628 mo
176.107 271.487 169.48 273.551 167.043 268.733 cv
165.777 266.231 165.212 261.337 167.263 258.761 cv
169.315 256.185 174.253 256.382 176.436 257.821 cv
178.619 259.261 178.598 264.623 177.507 267.628 cv
cp
.94902 .568627 .576471 rgb
f
279.607 285.945 mo
278.543 272.093 295.141 230.42 286.266 222.704 cv
281.25 218.342 276.227 216.718 269.832 214.38 cv
269.832 214.38 245.018 215.996 237.385 214.717 cv
233.643 215.923 229.459 217.533 224.911 219.214 cv
219.466 232.075 213.558 250.287 214.254 257.141 cv
215.318 267.62 222.342 276.586 222.068 285.356 cv
221.831 292.916 213.918 307.208 211.577 324.259 cv
211.577 324.259 230.007 330.106 249.611 329.313 cv
274.781 328.296 290.521 323.415 290.521 323.415 cv
289.643 314.916 280.537 298.061 279.607 285.945 cv
cp
1 .443137 .478431 rgb
f
266.79 284.376 mo
268.578 289.739 268.323 297.146 268.323 297.146 cv
281.441 295.222 li
280.515 291.98 279.828 288.827 279.607 285.945 cv
279.267 281.521 280.729 274.259 282.587 266.172 cv
280.527 262.342 276.236 256.795 275.474 257.302 cv
274.708 257.813 272.665 263.177 267.046 267.519 cv
261.526 271.784 254.02 271.861 253.509 273.649 cv
252.998 275.436 265.002 279.012 266.79 284.376 cv
cp
.819608 .360784 .423529 rgb
f
79.1681 294.153 mo
76.3463 295.924 72.9199 307.83 69.1305 324.368 cv
65.3088 341.047 60.6191 358.923 62.1122 362.094 cv
63.6078 365.271 92.7714 367.037 129.114 366.684 cv
165.449 366.331 248.355 367.947 274.928 366.888 cv
301.487 365.828 378.823 365.475 383.079 361.598 cv
387.326 357.727 379.857 334.776 376.65 322.985 cv
373.462 311.264 368.356 291.77 365.412 290.749 cv
362.469 289.729 325.616 290.409 304.734 290.409 cv
283.853 290.409 205.377 292.791 171.928 293.131 cv
138.473 293.472 84.5929 290.749 79.1681 294.153 cv
cp
.717647 .639216 .568627 rgb
f
141.193 352.754 mo
144.078 352.778 147.151 352.786 150.404 352.786 cv
176.471 352.786 213.653 352.123 249.738 351.469 cv
277.186 350.974 303.114 350.511 322.374 350.367 cv
339.916 350.243 362.306 349.931 383.549 349.588 cv
383.452 349.053 383.347 348.51 383.236 347.959 cv
362.084 348.301 339.824 348.612 322.366 348.739 cv
303.094 348.875 277.163 349.338 249.71 349.832 cv
209.132 350.567 167.161 351.277 141.209 351.126 cv
118.593 350.942 90.2706 349.92 65.2804 349.018 cv
64.683 348.997 64.0865 348.975 63.4912 348.954 cv
63.3765 349.505 63.2671 350.044 63.162 350.572 cv
63.8466 350.597 64.5331 350.622 65.2206 350.646 cv
90.2229 351.557 118.557 352.578 141.193 352.754 cv
cp
.639216 .54902 .482353 rgb
f
216.79 329.368 mo
252.938 329.703 287.083 329.998 305.026 329.456 cv
321.838 328.952 350.66 328.617 378.174 328.406 cv
378.016 327.851 377.861 327.309 377.71 326.777 cv
350.321 326.988 321.707 327.323 304.978 327.828 cv
287.068 328.354 252.938 328.067 216.802 327.732 cv
185.347 327.452 152.826 327.165 132.333 327.492 cv
114.151 327.778 90.0156 328.063 68.2202 328.299 cv
68.0929 328.845 67.9652 329.39 67.8375 329.935 cv
89.7388 329.697 114.062 329.407 132.357 329.12 cv
152.826 328.809 185.343 329.096 216.79 329.368 cv
cp
f
101.704 309.685 mo
141.325 309.35 261.818 307.578 300.928 306.964 cv
318.994 306.68 346.369 306.516 372.031 306.419 cv
371.868 305.872 371.705 305.329 371.541 304.793 cv
346.013 304.89 318.861 305.054 300.904 305.335 cv
261.794 305.942 141.305 307.714 101.688 308.057 cv
90.475 308.151 81.3486 308.136 73.2086 308.075 cv
73.0583 308.604 72.9077 309.151 72.756 309.704 cv
76.8617 309.737 81.2102 309.757 85.9525 309.757 cv
90.7537 309.757 95.9575 309.741 101.704 309.685 cv
cp
f
284.157 336.381 mo
283.768 336.381 283.439 336.08 283.408 335.684 cv
283.376 335.271 283.684 334.91 284.101 334.879 cv
292.983 334.196 302.001 334.196 310.722 334.196 cv
311.136 334.196 311.475 334.536 311.475 334.949 cv
311.475 335.362 311.136 335.702 310.722 335.702 cv
302.03 335.702 293.039 335.702 284.213 336.378 cv
284.157 336.381 li
cp
f
275.769 343.911 mo
272.582 343.911 269.734 343.785 267.059 343.53 cv
266.649 343.487 266.344 343.12 266.383 342.706 cv
266.424 342.297 266.792 342.027 267.206 342.03 cv
269.829 342.283 272.631 342.405 275.769 342.405 cv
279.59 342.405 283.485 342.223 287.25 342.048 cv
291.032 341.873 294.944 341.687 298.801 341.687 cv
299.214 341.687 299.553 342.027 299.553 342.44 cv
299.553 342.854 299.214 343.193 298.801 343.193 cv
294.979 343.193 291.085 343.375 287.32 343.55 cv
283.537 343.726 279.625 343.911 275.769 343.911 cv
cp
f
187.163 360.344 mo
184.298 360.344 181.709 360.302 179.244 360.215 cv
178.827 360.201 178.501 359.854 178.519 359.441 cv
178.533 359.034 178.866 358.712 179.269 358.712 cv
179.293 358.715 li
181.741 358.8 184.315 358.838 187.163 358.838 cv
193.106 358.838 199.134 358.649 204.958 358.463 cv
210.783 358.278 216.807 358.085 222.75 358.085 cv
228.855 358.085 234.259 358.292 239.271 358.715 cv
239.684 358.751 239.992 359.115 239.957 359.528 cv
239.919 359.941 239.54 360.211 239.145 360.215 cv
234.175 359.794 228.813 359.591 222.75 359.591 cv
216.831 359.591 210.821 359.78 205.007 359.966 cv
199.169 360.151 193.131 360.344 187.163 360.344 cv
cp
f
289.946 312.884 mo
289.533 312.884 289.2 312.551 289.194 312.138 cv
289.19 311.724 289.522 311.385 289.94 311.378 cv
290.29 311.374 325.401 311.038 363.163 311.038 cv
363.577 311.038 363.916 311.378 363.916 311.791 cv
363.916 312.204 363.577 312.544 363.163 312.544 cv
325.408 312.544 290.304 312.88 289.953 312.884 cv
289.946 312.884 li
cp
f
96.8578 335.702 mo
92.9318 335.702 88.9637 335.614 85.1251 335.53 cv
81.2831 335.443 77.3043 335.358 73.3606 335.358 cv
72.9475 335.358 72.6075 335.019 72.6075 334.605 cv
72.6075 334.192 72.9475 333.852 73.3606 333.852 cv
77.3218 333.852 81.3074 333.94 85.1599 334.028 cv
88.988 334.112 92.9457 334.196 96.8578 334.196 cv
97.2712 334.196 97.6108 334.536 97.6108 334.949 cv
97.6108 335.362 97.2712 335.702 96.8578 335.702 cv
cp
f
269.193 301.007 mo
269.595 302.299 268.979 318.331 268.911 323.789 cv
268.807 332.293 266.185 327.151 264.33 331.49 cv
262.561 335.629 263.228 341.397 262.295 344.591 cv
261.667 348.015 260.065 353.31 256.662 355.075 cv
252.112 356.832 245.411 355.345 241.138 355.075 cv
236.071 354.754 231.865 355.57 222.772 356.037 cv
213.679 356.505 208.419 353.631 208.419 353.631 cv
208.419 353.631 212 349.941 213.562 343.212 cv
214.154 337.003 215.168 333.711 216.377 331.49 cv
218.736 327.159 220.782 330.139 221.054 325.554 cv
221.312 321.219 221.082 303.687 222.941 301.351 cv
224.801 299.016 253.549 299.415 257.885 299.563 cv
262.57 299.724 268.755 299.606 269.193 301.007 cv
cp
f
215.254 233.102 mo
216.351 233.174 216.77 233.797 217.652 235.888 cv
218.303 237.436 219.117 239.368 221.1 240.142 cv
224.851 241.587 227.848 239.767 230.255 238.306 cv
232.099 237.189 233.687 236.207 235.483 236.439 cv
237.574 236.702 238.324 237.779 239.366 239.264 cv
240.487 240.868 242.024 243.071 245.488 243.255 cv
245.731 243.255 li
247.854 243.255 249.722 241.85 251.526 240.485 cv
253.154 239.256 254.834 237.987 256.446 237.891 cv
257.847 237.764 258.757 238.57 260.202 239.943 cv
262.117 241.763 265.002 244.54 270.223 242.034 cv
272.473 240.964 273.587 239.105 274.485 237.604 cv
275.558 235.816 276.197 234.858 277.901 234.531 cv
279.114 234.387 280.551 235.337 282.055 236.431 cv
283.923 237.779 286.038 239.312 288.576 238.889 cv
291.102 238.474 292.176 235.92 293.217 233.453 cv
293.509 232.763 293.85 231.957 294.219 231.256 cv
293.32 230.017 292.427 228.868 291.551 227.823 cv
290.655 229.014 290.03 230.492 289.45 231.865 cv
289.019 232.895 288.293 234.619 287.914 234.85 cv
286.991 235.114 285.727 234.036 284.449 233.119 cv
282.502 231.714 280.092 229.91 277.135 230.524 cv
273.551 231.211 272.126 233.589 270.977 235.505 cv
270.21 236.79 269.6 237.803 268.467 238.346 cv
265.793 239.615 264.871 238.737 263.019 236.981 cv
261.435 235.481 259.539 233.661 256.191 233.805 cv
253.353 233.98 251.075 235.704 249.063 237.229 cv
247.826 238.155 246.29 239.184 245.699 239.168 cv
244.291 239.096 243.768 238.426 242.714 236.926 cv
241.521 235.209 239.881 232.871 235.985 232.384 cv
232.789 231.961 230.307 233.485 228.128 234.818 cv
225.785 236.231 224.368 237.021 222.581 236.327 cv
222.209 236.183 221.751 235.098 221.419 234.3 cv
220.577 232.296 219.304 229.279 215.521 229.032 cv
214.664 228.951 213.728 229.054 212.778 229.289 cv
211.278 231.242 209.795 233.402 208.336 235.717 cv
209.04 236.055 li
209.487 235.162 212.835 233.19 215.254 233.102 cv
cp
.819608 .360784 .423529 rgb
f
206.797 260.415 mo
208.493 260.726 210.057 259.585 211.678 258.34 cv
212.803 257.478 214.328 256.4 215.254 256.345 cv
216.351 256.417 216.77 257.039 217.652 259.13 cv
218.303 260.679 219.117 262.61 221.1 263.384 cv
224.859 264.837 227.853 263.017 230.255 261.549 cv
232.099 260.423 233.687 259.465 235.483 259.681 cv
237.574 259.944 238.324 261.022 239.366 262.506 cv
240.487 264.111 242.024 266.314 245.488 266.497 cv
245.731 266.497 li
247.854 266.497 249.722 265.093 251.526 263.728 cv
253.154 262.498 254.834 261.229 256.446 261.133 cv
257.847 261.022 258.757 261.812 260.202 263.185 cv
262.117 265.005 265.002 267.782 270.223 265.276 cv
272.473 264.207 273.587 262.347 274.485 260.846 cv
275.558 259.058 276.197 258.1 277.901 257.773 cv
279.114 257.614 280.551 258.58 282.055 259.673 cv
283.923 261.014 286.038 262.546 288.576 262.131 cv
291.334 261.676 292.523 259.146 293.477 257.111 cv
294.454 255.036 295.141 253.751 296.438 253.399 cv
297.843 253.08 300.325 254.661 302.324 255.993 cv
304.32 257.312 306.362 258.651 308.315 258.764 cv
307.73 257.079 307.097 255.399 306.424 253.736 cv
305.771 253.356 305.097 252.928 304.579 252.585 cv
301.757 250.718 298.561 248.587 295.376 249.456 cv
292.156 250.319 290.839 253.12 289.777 255.371 cv
289.175 256.664 288.548 257.989 287.914 258.093 cv
286.991 258.348 285.727 257.286 284.449 256.361 cv
282.502 254.956 280.092 253.176 277.135 253.767 cv
273.551 254.453 272.126 256.832 270.977 258.747 cv
270.21 260.032 269.6 261.046 268.467 261.589 cv
265.793 262.857 264.871 261.979 263.019 260.224 cv
261.435 258.723 259.539 256.879 256.191 257.047 cv
253.353 257.222 251.075 258.947 249.063 260.471 cv
247.826 261.397 246.29 262.435 245.699 262.411 cv
244.291 262.339 243.768 261.668 242.714 260.168 cv
241.521 258.452 239.881 256.113 235.985 255.626 cv
232.789 255.179 230.307 256.728 228.128 258.061 cv
225.785 259.473 224.368 260.255 222.581 259.569 cv
222.209 259.426 221.751 258.34 221.419 257.542 cv
220.577 255.539 219.304 252.521 215.521 252.274 cv
213.111 252.114 210.907 253.774 209.18 255.108 cv
208.561 255.586 207.627 256.305 207.599 256.408 cv
206.394 256.169 205.68 254.836 204.646 252.681 cv
203.851 251.021 202.97 249.189 201.443 248.007 cv
200.796 249.277 200.158 250.561 199.53 251.853 cv
200.037 252.522 200.49 253.468 200.959 254.445 cv
202.092 256.815 203.505 259.753 206.797 260.415 cv
cp
f
262.915 298.743 mo
260.298 298.743 li
260.298 286.094 li
262.915 286.094 li
262.915 298.743 li
cp
.4 .305882 .329412 rgb
f
182.793 257.162 mo
182.793 257.162 177.755 257.71 176.453 258.468 cv
175.151 259.225 174.972 268.431 175.851 270.521 cv
176.73 272.61 181.53 272.779 181.53 272.779 cv
182.793 257.162 li
cp
f
253.319 285.804 mo
256.534 287.813 265.823 287.548 268.149 286.094 cv
270.475 284.641 273.965 282.024 273.965 269.81 cv
273.965 257.598 272.802 252.945 269.312 250.91 cv
265.823 248.874 191.382 247.711 185.567 251.491 cv
179.751 255.271 180.042 277.953 179.751 287.839 cv
179.46 297.726 178.588 314.591 181.786 317.499 cv
184.985 320.407 205.921 320.989 222.496 320.698 cv
239.071 320.407 268.149 320.407 270.766 318.662 cv
273.383 316.918 271.638 300.052 269.603 298.889 cv
267.568 297.726 251.284 298.016 240.234 298.598 cv
229.184 299.18 215.808 300.052 213.773 298.307 cv
211.737 296.563 212.319 277.08 214.354 275.626 cv
216.39 274.172 244.887 273.881 247.504 275.045 cv
250.121 276.208 250.993 284.35 253.319 285.804 cv
cp
1 .933333 .843137 rgb
f
269.012 319.174 mo
269.193 312.236 269.511 302.027 269.193 301.007 cv
268.755 299.606 262.57 299.723 257.885 299.563 cv
253.55 299.414 224.801 299.016 222.941 301.351 cv
221.516 303.141 221.318 313.858 221.188 320.718 cv
221.626 320.711 222.063 320.705 222.496 320.697 cv
237.261 320.439 261.947 320.411 269.012 319.174 cv
cp
.858824 .764706 .670588 rgb
f
265.226 250.406 mo
268.715 252.442 269.878 257.598 269.878 269.81 cv
269.878 282.023 266.389 284.64 264.063 286.094 cv
263.173 286.65 261.264 287.031 259.067 287.179 cv
262.711 287.425 266.729 286.982 268.149 286.094 cv
270.475 284.64 273.965 282.023 273.965 269.81 cv
273.965 257.598 272.802 252.945 269.313 250.91 cv
268.84 250.634 267.065 250.375 264.339 250.141 cv
264.768 250.227 265.07 250.315 265.226 250.406 cv
cp
f
220.405 299.316 mo
217.228 299.241 214.911 298.954 214.156 298.307 cv
212.12 296.563 212.702 277.08 214.737 275.626 cv
215.832 274.844 224.574 274.4 232.831 274.335 cv
223.644 274.259 211.929 274.713 210.651 275.626 cv
208.615 277.08 208.034 296.563 210.07 298.307 cv
211.12 299.208 215.193 299.41 220.405 299.316 cv
cp
f
266.897 298.453 mo
267.29 299.745 266.689 315.777 266.623 321.235 cv
266.521 329.738 263.965 324.597 262.157 328.936 cv
260.433 333.075 261.083 338.843 260.173 342.037 cv
259.561 345.461 257.999 350.756 254.682 352.521 cv
250.247 354.278 243.714 352.791 239.549 352.521 cv
234.609 352.2 230.509 353.016 221.645 353.483 cv
212.781 353.95 207.653 351.077 207.653 351.077 cv
207.653 351.077 211.144 347.387 212.666 340.658 cv
213.244 334.449 214.232 331.156 215.411 328.936 cv
217.71 324.604 219.705 327.584 219.97 323 cv
220.221 318.666 219.997 301.132 221.81 298.797 cv
223.622 296.462 251.647 296.861 255.874 297.009 cv
260.442 297.169 266.471 297.052 266.897 298.453 cv
cp
.623529 .819608 .768627 rgb
f
266.842 311.972 mo
266.903 309.616 266.961 307.199 266.996 305.068 cv
250.699 305.319 li
242.399 309.789 li
241.888 311.321 243.676 311.705 247.762 309.023 cv
247.762 309.023 244.442 311.96 244.187 313.748 cv
243.931 315.536 246.996 315.536 252.36 311.194 cv
252.36 311.194 248.507 314.563 249.167 315.663 cv
250.317 317.579 254.786 314.003 256.191 313.493 cv
257.595 312.982 262.805 312.981 266.842 311.972 cv
cp
.529412 .729412 .686275 rgb
f
220.306 320.899 mo
220.036 321.219 li
220.018 321.937 219.997 322.543 219.97 323 cv
219.855 324.978 219.42 325.547 218.775 325.904 cv
222.78 326.127 230.81 326.518 237.929 326.518 cv
246.76 326.518 256.191 326.319 264.447 326.808 cv
265.599 326.53 266.562 326.388 266.623 321.235 cv
266.63 320.715 266.641 320.098 266.655 319.408 cv
255.944 320.683 230.525 321.117 220.306 320.899 cv
cp
f
260.603 339.437 mo
255.413 339.988 245.568 341.695 235.886 341.077 cv
226.42 340.473 216.638 338.916 212.924 338.284 cv
212.831 339.025 212.745 339.814 212.666 340.658 cv
211.144 347.387 207.653 351.076 207.653 351.076 cv
207.653 351.076 212.781 353.95 221.645 353.483 cv
230.509 353.016 234.609 352.199 239.549 352.52 cv
243.714 352.791 250.247 354.278 254.682 352.52 cv
257.999 350.756 259.561 345.461 260.173 342.037 cv
260.385 341.294 260.511 340.407 260.603 339.437 cv
cp
f
263.006 190.365 mo
263.006 190.365 245.629 196.339 242.268 202.581 cv
246.561 207.788 243.521 212.962 237.385 214.717 cv
237.385 214.717 239.741 224.303 252.608 224.085 cv
267.398 223.834 269.832 214.38 269.832 214.38 cv
269.832 214.38 262.247 211.403 260.856 205.179 cv
259.359 198.475 260.502 194.972 263.006 190.365 cv
cp
level3{
gsave
clp
[1.28576e-009 -28.6382 28.6382 1.28576e-009 253.608 223.597 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 .717647 .654902 ]
/C1 [1 .584314 .584314 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.28576e-009 -28.6382 28.6382 1.28576e-009 253.608 223.597 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
255 <~\$i`R[^NWQ[C*EM[C*EM['[3I['[3HZa7!EZa7!DZEgdAZEga?Z*CR=Z*CO;Yct@9Yck76YHP.5YHG%2
Y-+q1Xf\_-Xf\_-XK8M)XK8M(X/i;%X/i;$WiE)!WiE%tWMukrWMuhpW2QYnW2HPkVl-GjVl$>gVP^5f
VPU,cV5:#bUnjf^Unjf^USFTZUSFTYU8"BVU8"BUTqS0RTqS-PTV.sNTV.pLT:_aJT:VXGSt;OFSt2FC
SXl=BS=H+>S=H+>S"#n:S"#n9R[T\6R[T\5R@0J2R@0G0R$a8.R$a5,Q^=&*Q^3r'QBmi&QBd`#Q'IW"
~>
<~Vl$>gVP^5fVP^5fVP^5eV5:#bV5:#bV5:#bV50o_Unjf^Unjf^Unjf]USFTZUSFTZUSFTZUS=KWU8"BV
U8"BVU8"BVTqS0RTqS0RTqS0RTqS-PTV.sNTV.sNTV.sNT:_aJT:_aJT:_aJT:_^HSt;OFSt;OFSt;OF
St2FCSXl=BSXl=BSXl=AS=H+>S=H+>S=H+>S=?";S"#n:S"#n:S"#n9R[T\6R[T\6R[T\6R[KS3R@0J2
R@0J2R@0J2R$a8.R$a8.R$a8.R$a5,Q^=&*Q^=&*Q^=&*QBmi&QBmi&QBmi&QBmf$Q'IW"Q'IW"Q'IW"
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
260.857 205.179 mo
259.359 198.475 260.502 194.972 263.006 190.365 cv
263.006 190.365 262.34 190.595 261.246 191.008 cv
243.064 203.681 li
244.528 205.993 244.591 208.251 243.632 210.155 cv
244.697 212.256 247.424 215.949 253.917 217.76 cv
261.003 219.738 269.832 214.38 269.832 214.38 cv
269.832 214.38 262.247 211.403 260.857 205.179 cv
cp
.827451 .478431 .521569 rgb
f
268.798 179.19 mo
266.253 178.956 264.704 182.32 264.704 182.32 cv
260.878 179.119 262.893 174.055 262.893 174.055 cv
262.893 174.055 245.21 168.553 238.411 152.783 cv
229.169 153.957 226.775 167.202 226.775 167.202 cv
222.347 195.675 236.38 207.769 241.203 208.406 cv
244.404 208.949 257.186 204.817 263.419 192.444 cv
267.479 193.337 271.184 190.9 272.655 187.29 cv
274.065 183.831 273.24 179.41 268.798 179.19 cv
cp
level3{
gsave
clp
[19.3952 -67.2256 67.2256 19.3952 240.474 209.218 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[19.3952 -67.2256 67.2256 19.3952 240.474 209.218 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
244.235 169.198 mo
244.01 170.909 246.974 168.447 251.943 170.012 cv
254.944 170.957 257.075 174.105 257.546 173.717 cv
258.018 173.33 256.95 170.331 252.585 168.374 cv
249.061 166.794 244.4 167.942 244.235 169.198 cv
cp
.4 .305882 .329412 rgb
f
234.674 169.505 mo
235.016 171.061 231.642 170.235 228.668 171.604 cv
226.537 172.586 226.039 174.324 225.553 174.107 cv
225.067 173.89 224.783 171.732 227.728 169.884 cv
230.155 168.362 234.461 168.536 234.674 169.505 cv
cp
f
238.588 179.426 mo
239.476 176.597 238.614 174.205 236.237 171.914 cv
239.167 173.685 240.878 176.94 240.116 179.76 cv
239.345 182.832 236.871 187.439 236.827 188.318 cv
236.769 189.47 238.013 191.398 239.955 192.1 cv
236.497 191.751 234.739 189.533 234.938 187.876 cv
235.068 186.798 237.627 182.73 238.588 179.426 cv
cp
.827451 .478431 .521569 rgb
f
270.39 186.784 mo
269.585 188.554 268.008 189.569 266.866 189.05 cv
265.725 188.531 265.452 186.676 266.256 184.906 cv
267.061 183.135 268.638 182.121 269.779 182.639 cv
270.921 183.158 271.194 185.013 270.39 186.784 cv
cp
f
272.746 296.574 mo
272.746 296.574 267.682 299.304 264.442 300.192 cv
260.182 301.326 253.853 302.395 250.856 303.294 cv
247.115 304.416 241.923 307.987 242.391 309.273 cv
243.056 311.097 247.26 307.04 251.451 306.552 cv
248.309 308.238 243.629 311.733 244.214 313.259 cv
245.037 315.404 251.456 309.287 254.558 309.15 cv
252.804 310.036 248.26 314.234 248.881 315.158 cv
249.828 316.567 254.451 312.081 255.651 311.684 cv
256.851 311.288 264.792 309.714 267.758 308.136 cv
267.758 308.136 273.671 307.145 279.159 305.284 cv
272.746 296.574 li
cp
level3{
gsave
clp
[25.6455 -11.5932 11.5932 25.6455 265.859 303.833 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[25.6455 -11.5932 11.5932 25.6455 265.859 303.833 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
255.651 311.684 mo
256.851 311.288 264.792 309.714 267.758 308.136 cv
267.758 308.136 273.671 307.145 279.159 305.284 cv
272.746 296.574 li
272.746 296.574 268.138 299.058 264.901 300.057 cv
265.55 300.634 266.063 301.424 266.28 302.51 cv
267.173 306.98 256.319 310.555 254.659 311.066 cv
253.051 311.561 249.528 315.648 248.93 315.215 cv
249.973 316.425 254.469 312.075 255.651 311.684 cv
cp
.94902 .568627 .576471 rgb
f
266.413 298.043 mo
272.956 309.602 li
272.956 309.602 311.128 304.995 312.437 282.024 cv
313.603 261.555 296.517 229.9 286.266 222.704 cv
277.252 257.888 li
277.252 257.888 288.52 273.809 288.302 278.825 cv
288.084 283.841 266.413 298.043 266.413 298.043 cv
cp
1 .443137 .478431 rgb
f
248.953 193.778 mo
248.953 193.778 245.136 195.272 241.974 195.847 cv
238.066 196.557 235.289 196.279 235.289 196.279 cv
235.289 196.279 238.475 201.179 243.186 200.247 cv
247.756 199.344 248.953 193.778 248.953 193.778 cv
cp
.698039 .356863 .423529 rgb
f
242.288 197.617 mo
238.266 198.253 235.314 196.308 235.314 196.308 cv
235.289 196.279 li
235.289 196.279 238.378 196.597 241.974 195.847 cv
245.545 195.102 248.954 193.778 248.954 193.778 cv
248.954 193.778 246.647 196.928 242.288 197.617 cv
cp
.580392 .278431 .337255 rgb
f
245.534 179.042 mo
245.534 179.042 248.337 181.933 251.688 180.582 cv
254.888 179.291 255.238 177.087 256.847 176.735 cv
256.847 176.735 256.093 175.483 252.67 177.429 cv
248.574 179.757 245.534 179.042 245.534 179.042 cv
cp
.4 .305882 .329412 rgb
f
235.396 180.801 mo
235.396 180.801 233.291 183.029 230.256 182.623 cv
227.474 182.25 227.452 179.682 226.549 180.098 cv
226.549 180.098 226.937 179.204 228.118 179.667 cv
228.932 179.985 229.551 180.251 230.567 180.447 cv
231.583 180.642 232.996 180.766 235.396 180.801 cv
cp
f
171.449 255.794 mo
172.871 255.751 174.278 256.269 175.266 256.698 cv
176.887 257.402 181.416 259.713 180.685 260.967 cv
180.083 261.999 177.645 260.983 174.855 260.146 cv
173.213 259.654 169.929 259.243 169.683 259.982 cv
169.5 260.531 172.356 260.263 174.937 261.05 cv
177.729 261.9 180.707 263.273 180.356 264.169 cv
179.617 266.058 176.707 264.704 173.87 264.251 cv
171.29 263.84 168.967 263.839 168.862 264.416 cv
168.786 264.832 170.931 264.764 172.967 265.155 cv
175.348 265.611 177.671 266.56 177.507 267.628 cv
177.349 268.658 175.025 268.011 172.556 267.946 cv
170.682 267.897 168.873 268.37 167.577 267.358 cv
164.163 264.693 166.07 255.959 171.449 255.794 cv
cp
level3{
gsave
clp
[-35.5873 -4.25688 4.25688 -35.5873 176.592 262.6 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-35.5873 -4.25688 4.25688 -35.5873 176.592 262.6 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
286.266 222.704 mo
297.059 233.057 311.861 272.03 308.677 282.588 cv
303.825 298.679 276.175 303.238 270.36 305.016 cv
272.956 309.601 li
272.956 309.601 311.128 304.995 312.438 282.023 cv
313.603 261.555 296.517 229.9 286.266 222.704 cv
cp
.819608 .360784 .423529 rgb
f
288.576 238.889 mo
291.102 238.474 292.176 235.92 293.217 233.453 cv
293.509 232.763 293.85 231.957 294.219 231.256 cv
291.942 228.116 292.804 229.493 291.551 227.823 cv
290.655 229.014 290.03 230.492 289.45 231.865 cv
289.019 232.895 288.293 234.619 287.914 234.85 cv
286.865 235.15 284.656 233.258 283.73 232.602 cv
282.246 233.779 282.12 235.246 282.642 236.851 cv
284.364 238.074 286.3 239.268 288.576 238.889 cv
cp
f
282.055 259.673 mo
283.923 261.014 286.038 262.546 288.576 262.131 cv
291.334 261.676 292.523 259.146 293.477 257.111 cv
294.454 255.036 295.141 253.751 296.438 253.399 cv
297.843 253.08 300.325 254.661 302.324 255.993 cv
304.32 257.312 306.362 258.651 308.315 258.764 cv
307.73 257.079 307.097 255.399 306.424 253.736 cv
305.771 253.356 305.097 252.928 304.579 252.585 cv
301.757 250.718 298.561 248.587 295.376 249.456 cv
292.156 250.319 290.839 253.12 289.777 255.371 cv
289.175 256.664 288.548 257.989 287.914 258.093 cv
286.991 258.348 285.727 257.286 284.449 256.361 cv
282.773 255.151 280.753 253.668 278.337 253.654 cv
276.972 254.74 276.749 256.197 277.252 257.888 cv
277.285 257.935 li
277.475 257.87 277.678 257.816 277.901 257.773 cv
279.114 257.614 280.551 258.58 282.055 259.673 cv
cp
f
278.466 169.872 mo
268.001 169.576 260.057 166.495 252.516 159.251 cv
252.113 158.864 251.447 159.357 251.736 159.852 cv
256.572 168.153 269.505 172.27 278.565 170.609 cv
278.994 170.53 278.874 169.884 278.466 169.872 cv
cp
.34902 .266667 .290196 rgb
f
248.882 146.245 mo
249.874 152.228 257.784 159.836 264.063 159.498 cv
264.551 159.471 264.679 158.765 264.181 158.626 cv
257.357 156.714 253.053 151.878 249.615 145.936 cv
249.374 145.519 248.81 145.816 248.882 146.245 cv
cp
f
290.84 204.785 mo
291.496 208.942 290.455 214.073 286.797 216.477 cv
286.07 216.955 286.513 218.301 287.424 217.964 cv
292.183 216.207 292.684 208.693 291.502 204.603 cv
291.377 204.168 290.773 204.358 290.84 204.785 cv
cp
f
277.286 180.813 mo
276.993 191.609 289.821 197.179 286.353 208.527 cv
286.172 209.121 287.077 209.519 287.367 208.955 cv
292.403 199.186 279.123 189.848 277.805 180.743 cv
277.761 180.44 277.293 180.527 277.286 180.813 cv
cp
f
164.468 321.666 mo
165.858 320.68 166.815 313.663 164.701 313.101 cv
164.426 313.028 163.775 312.876 163.775 312.876 cv
166.155 311.977 166.815 308.494 166.419 307.033 cv
166.186 306.174 165.446 305.667 164.208 305.439 cv
166.875 305.123 167.608 303.691 167.338 302.451 cv
167.344 302.426 li
167.344 300.74 165.494 298.155 163.115 295.122 cv
162.584 294.444 162.161 293.782 161.79 293.153 cv
137.572 293.045 107.354 291.991 90.8588 292.62 cv
90.5334 293.385 90.1927 294.309 89.4912 295.459 cv
87.6403 298.493 86.9797 306.471 89.095 306.808 cv
89.095 306.808 89.6311 315.25 90.0153 315.318 cv
89.8876 315.348 li
87.0869 316.063 86.0924 320.022 89.9302 321.115 cv
94.0823 322.297 103.682 321.82 119.892 322.315 cv
141.966 322.989 161.587 323.709 164.468 321.666 cv
cp
.639216 .54902 .482353 rgb
f
157.842 309.812 mo
160.092 308.912 160.717 305.429 160.342 303.968 cv
159.966 302.507 158.217 302.058 155.091 302.283 cv
151.967 302.507 144.342 303.294 123.091 303.743 cv
101.841 304.193 89.8409 303.294 87.2157 303.743 cv
84.5908 304.193 84.0908 311.16 87.2157 312.059 cv
90.3408 312.958 110.091 314.643 128.466 314.306 cv
146.842 313.969 157.842 309.812 157.842 309.812 cv
cp
1 .443137 .478431 rgb
f
88.0061 318.05 mo
91.9325 319.232 101.011 318.755 116.341 319.251 cv
137.216 319.925 155.772 320.644 158.497 318.601 cv
159.811 317.615 160.717 310.598 158.717 310.036 cv
156.716 309.474 142.591 312.508 125.591 313.07 cv
112.405 313.506 92.9658 310.935 87.9659 312.284 cv
85.317 312.998 84.3767 316.957 88.0061 318.05 cv
cp
1 .866667 .478431 rgb
f
84.3408 298.687 mo
85.8407 295.316 85.8407 295.428 87.5908 292.394 cv
89.3409 289.36 88.7158 287.899 91.7159 286.775 cv
94.7159 285.652 108.591 287 121.216 286.887 cv
133.841 286.775 149.467 285.764 152.091 285.989 cv
154.717 286.214 154.967 289.023 157.217 292.057 cv
159.467 295.091 161.217 297.675 161.217 299.361 cv
161.217 301.046 135.466 301.721 125.466 301.945 cv
115.466 302.17 84.3408 298.687 84.3408 298.687 cv
cp
.529412 .729412 .686275 rgb
f
87.2157 303.743 mo
85.2159 303.406 83.8408 300.709 84.2157 299.136 cv
84.5908 297.563 87.8408 296.776 94.8407 297.338 cv
100.37 297.782 108.841 299.024 122.591 299.586 cv
136.341 300.148 155.341 295.99 159.716 297.563 cv
161.606 298.242 162.467 301.945 158.091 302.395 cv
153.716 302.844 135.466 304.979 120.466 304.979 cv
105.466 304.979 87.2157 303.743 87.2157 303.743 cv
cp
.623529 .819608 .768627 rgb
f
116.622 282.931 mo
115.862 283.296 110.127 281.255 108.548 280.437 cv
106.971 279.62 105.207 277.849 107.181 276.551 cv
109.155 275.254 113.066 276.829 114.816 278.5 cv
117.036 280.619 117.382 282.565 116.622 282.931 cv
cp
119.579 285.718 mo
120.098 284.226 li
120.098 284.226 120.206 281.531 116.859 278.001 cv
114.243 275.242 108.276 272.917 105.086 275.015 cv
101.896 277.113 104.49 280.561 107.257 281.578 cv
110.202 282.66 110.206 282.654 119.579 285.718 cv
cp
.4 .305882 .329412 rgb
f
118.879 285.384 mo
120.08 283.884 li
120.08 283.884 131.194 285.805 136.44 288.684 cv
143.869 292.76 146.04 295.872 146.04 295.872 cv
146.04 295.872 135.046 293.46 130.131 291.277 cv
125.217 289.095 118.879 285.384 118.879 285.384 cv
cp
.8 .729412 .658824 rgb
f
118.879 285.384 mo
146.04 295.872 li
146.04 295.872 139.076 296.761 131.787 294.215 cv
124.498 291.668 117.533 287.169 117.533 287.169 cv
118.879 285.384 li
cp
1 .933333 .843137 rgb
f
108.411 288.149 mo
105.583 288.385 101.334 287.207 101.199 284.96 cv
101.064 282.713 104 282.406 105.886 282.737 cv
107.777 283.069 113.748 285.008 113.928 285.767 cv
114.108 286.526 111.998 287.849 108.411 288.149 cv
cp
106.079 281.037 mo
103.167 280.127 98.0427 281.244 98.2596 284.877 cv
98.4763 288.51 104.882 290.367 109.36 289.808 cv
115.091 289.092 117.533 287.169 117.533 287.169 cv
118.879 285.384 li
118.879 285.384 108.99 281.947 106.079 281.037 cv
cp
.4 .305882 .329412 rgb
f
86.3962 348.714 mo
86.8763 343.796 98.5437 342.183 109.087 342.387 cv
119.63 342.591 127.881 345.245 127.881 349.53 cv
127.881 353.816 116.192 356.877 105.878 356.673 cv
95.5641 356.469 85.9379 353.408 86.3962 348.714 cv
cp
.639216 .54902 .482353 rgb
f
88.5922 349.291 mo
86.6444 346.894 86.045 339.402 88.2924 336.706 cv
89.8657 334.818 94.4355 331.911 102.676 331.462 cv
110.312 331.045 120.356 333.26 129.345 329.514 cv
129.345 329.514 130.244 332.211 129.795 336.855 cv
129.795 336.855 123.652 339.852 113.314 338.803 cv
102.975 337.754 88.5922 349.291 88.5922 349.291 cv
cp
.956863 .745098 .403922 rgb
f
125.075 330.864 mo
125.206 332.064 125.516 335.345 125.38 338.233 cv
128.24 337.613 129.795 336.855 129.795 336.855 cv
130.244 332.21 129.346 329.513 129.346 329.513 cv
127.943 330.098 126.516 330.537 125.075 330.864 cv
cp
.4 .305882 .329412 rgb
f
95.9349 341.275 mo
96.1351 341.275 96.2928 341.114 96.2928 340.917 cv
96.2928 332.421 li
96.0491 332.485 95.8098 332.55 95.5767 332.619 cv
95.5767 340.917 li
95.5767 341.114 95.7345 341.275 95.9349 341.275 cv
cp
f
103.854 331.419 mo
103.996 333.929 104.092 338.572 104.112 340.342 cv
104.349 340.255 104.586 340.172 104.823 340.091 cv
104.798 338.296 104.722 333.951 104.568 331.409 cv
104.328 331.41 104.09 331.414 103.854 331.419 cv
cp
f
111.77 331.636 mo
111.79 333.417 111.833 336.522 111.894 338.736 cv
112.136 338.736 112.376 338.742 112.615 338.754 cv
112.554 336.583 112.497 333.452 112.478 331.663 cv
112.241 331.654 112.005 331.646 111.77 331.636 cv
cp
f
88.9888 340.798 mo
89.0767 340.791 li
89.2664 340.741 89.3822 340.552 89.3435 340.362 cv
89.2969 340.122 89.2373 338.071 89.1882 335.814 cv
88.9175 336.046 88.6829 336.271 88.486 336.486 cv
88.5298 338.546 88.5864 340.316 88.6517 340.545 cv
88.694 340.699 88.8342 340.798 88.9888 340.798 cv
cp
f
119.46 331.636 mo
119.22 331.651 118.98 331.665 118.741 331.676 cv
118.925 333.674 118.88 335.733 118.837 337.743 cv
118.827 338.165 118.818 338.587 118.811 339.008 cv
119.054 339.001 119.295 338.992 119.531 338.981 cv
119.539 338.574 119.548 338.165 119.557 337.756 cv
119.6 335.734 119.646 333.663 119.46 331.636 cv
cp
f
119.007 341.35 mo
88.4423 340.151 li
87.9928 347.943 li
87.9928 350.939 95.634 353.336 102.226 353.636 cv
108.819 353.936 119.307 350.939 119.007 349.141 cv
119.427 346.894 119.386 344.263 119.007 341.35 cv
cp
.956863 .745098 .403922 rgb
f
88.4423 340.151 mo
88.4423 337.023 100.428 335.357 108.519 336.256 cv
116.61 337.155 118.708 339.552 119.007 341.35 cv
119.307 343.148 108.819 346.145 102.226 345.845 cv
95.634 345.545 88.4423 343.148 88.4423 340.151 cv
cp
1 .866667 .478431 rgb
f
92.4863 342.343 mo
92.2861 342.343 92.1283 342.504 92.1283 342.701 cv
92.1283 351.605 li
92.3596 351.698 92.6 351.786 92.8446 351.874 cv
92.8446 342.701 li
92.8446 342.504 92.6868 342.343 92.4863 342.343 cv
cp
.4 .305882 .329412 rgb
f
100.451 343.417 mo
100.265 343.488 100.173 343.691 100.244 343.881 cv
100.458 344.452 100.604 350.545 100.652 353.526 cv
100.891 353.548 101.13 353.567 101.367 353.584 cv
101.323 350.706 101.194 344.333 100.911 343.614 cv
100.84 343.424 100.619 343.326 100.451 343.417 cv
cp
f
109.026 344.07 mo
109.04 343.874 108.889 343.705 108.689 343.691 cv
108.668 343.691 li
108.478 343.691 108.32 343.839 108.31 344.028 cv
108.305 344.092 108.365 350.043 108.469 353.193 cv
108.707 353.156 108.946 353.116 109.184 353.073 cv
109.091 350.091 109 344.499 109.026 344.07 cv
cp
f
115.765 342.034 mo
115.73 341.837 115.54 341.704 115.347 341.746 cv
115.15 341.781 115.02 341.964 115.056 342.16 cv
115.512 344.703 115.449 347.414 115.393 350.033 cv
115.381 350.525 115.371 351.016 115.364 351.505 cv
115.614 351.416 115.856 351.328 116.087 351.238 cv
116.095 350.842 116.103 350.444 116.113 350.047 cv
116.169 347.392 116.232 344.646 115.765 342.034 cv
cp
f
88.4423 340.151 mo
88.4423 337.023 100.428 335.357 108.519 336.256 cv
116.61 337.155 118.708 339.552 119.007 341.35 cv
119.307 343.148 108.819 346.145 102.226 345.845 cv
95.634 345.545 88.4423 343.148 88.4423 340.151 cv
cp
1 .866667 .478431 rgb
f
99.0785 343.522 mo
99.0365 343.522 li
98.5039 343.463 93.8075 342.903 92.6024 341.246 cv
92.34 340.882 92.2489 340.489 92.3328 340.076 cv
92.6899 338.349 97.6108 337.779 98.5914 337.68 cv
98.6301 337.68 li
98.8228 337.68 98.9838 337.824 99.0049 338.017 cv
99.0258 338.223 98.8718 338.409 98.6686 338.43 cv
96.5145 338.64 93.2469 339.362 93.0684 340.23 cv
93.0264 340.43 93.0719 340.612 93.2118 340.801 cv
94.0664 341.978 97.7651 342.626 99.1205 342.773 cv
99.327 342.798 99.474 342.983 99.4532 343.19 cv
99.4321 343.382 99.2675 343.522 99.0785 343.522 cv
cp
.956863 .745098 .403922 rgb
f
108.353 342.696 mo
108.164 342.696 108.003 342.556 107.978 342.366 cv
107.953 342.16 108.1 341.974 108.307 341.947 cv
109.999 341.747 112.881 341.165 113.424 340.469 cv
113.48 340.339 li
113.399 339.701 110.675 338.99 108.181 338.728 cv
107.975 338.703 107.824 338.521 107.845 338.315 cv
107.87 338.108 108.062 337.961 108.258 337.978 cv
109.61 338.122 114.033 338.71 114.222 340.244 cv
114.244 340.409 114.226 340.661 114.016 340.931 cv
113.105 342.1 108.878 342.636 108.398 342.696 cv
108.353 342.696 li
cp
f
102.539 341.614 mo
101.933 341.614 99.4321 341.568 98.7772 340.843 cv
98.6266 340.675 98.5602 340.472 98.5811 340.262 cv
98.7104 339.109 101.324 338.983 102.462 338.983 cv
102.675 338.962 102.85 339.148 102.85 339.358 cv
102.85 339.565 102.682 339.733 102.476 339.733 cv
102.469 339.733 li
100.812 339.733 99.3585 340.069 99.3306 340.346 cv
99.4708 340.608 100.991 340.864 102.532 340.864 cv
102.581 340.864 li
102.787 340.864 102.955 341.029 102.955 341.239 cv
102.955 341.445 102.791 341.614 102.581 341.614 cv
102.539 341.614 li
cp
f
103.575 344.664 mo
102.994 344.664 102.381 344.65 101.733 344.619 cv
101.526 344.608 101.365 344.433 101.376 344.226 cv
101.386 344.016 101.548 343.869 101.768 343.869 cv
107.214 344.142 110.318 343.095 110.349 343.088 cv
110.545 343.018 110.759 343.123 110.825 343.319 cv
110.895 343.516 110.79 343.729 110.594 343.796 cv
110.479 343.838 108.013 344.664 103.575 344.664 cv
cp
f
109.046 337.813 mo
108.962 337.807 li
107.449 337.456 105.982 337.337 104.465 337.421 cv
104.276 337.425 104.08 337.274 104.069 337.068 cv
104.055 336.861 104.216 336.682 104.423 336.672 cv
106.002 336.57 107.547 336.707 109.13 337.071 cv
109.333 337.12 109.459 337.32 109.414 337.523 cv
109.372 337.698 109.218 337.813 109.046 337.813 cv
cp
f
149.48 341.733 mo
149.891 337.079 159.871 335.553 168.889 335.746 cv
177.908 335.939 184.966 338.45 184.966 342.506 cv
184.966 346.563 174.967 349.46 166.145 349.267 cv
157.322 349.073 149.088 346.176 149.48 341.733 cv
cp
.639216 .54902 .482353 rgb
f
167.514 335.254 mo
167.514 336.185 166.734 336.939 165.772 336.939 cv
164.81 336.939 164.031 336.185 164.031 335.254 cv
164.031 334.323 164.81 333.568 165.772 333.568 cv
166.734 333.568 167.514 334.323 167.514 335.254 cv
cp
.956863 .745098 .403922 rgb
f
177.065 336.49 mo
177.065 337.421 176.286 338.175 175.324 338.175 cv
174.362 338.175 173.582 337.421 173.582 336.49 cv
173.582 335.559 174.362 334.804 175.324 334.804 cv
176.286 334.804 177.065 335.559 177.065 336.49 cv
cp
.623529 .819608 .768627 rgb
f
158.805 336.602 mo
158.805 337.533 158.026 338.288 157.064 338.288 cv
156.101 338.288 155.322 337.533 155.322 336.602 cv
155.322 335.671 156.101 334.917 157.064 334.917 cv
158.026 334.917 158.805 335.671 158.805 336.602 cv
cp
1 .443137 .478431 rgb
f
181.186 340.505 mo
181.186 336.996 169.44 335.127 161.511 336.136 cv
153.582 337.144 151.014 339.671 151.232 341.849 cv
151.52 344.706 161.217 347.227 167.678 346.891 cv
174.138 346.554 181.186 343.866 181.186 340.505 cv
cp
1 .968627 .933333 rgb
f
176.391 340.845 mo
176.391 338.682 168.404 337.53 163.012 338.151 cv
157.621 338.773 155.874 340.331 156.023 341.674 cv
156.218 343.435 162.813 344.989 167.206 344.782 cv
171.599 344.575 176.391 342.917 176.391 340.845 cv
cp
.941176 .866667 .756863 rgb
f
159.589 341.086 mo
159.589 339.877 164.774 339.233 168.274 339.581 cv
171.774 339.928 172.908 340.799 172.812 341.55 cv
172.685 342.534 168.404 343.403 165.552 343.287 cv
162.7 343.171 159.589 342.245 159.589 341.086 cv
cp
1 .968627 .933333 rgb
f
151.445 341.313 mo
151.445 342.244 150.665 342.998 149.703 342.998 cv
148.741 342.998 147.961 342.244 147.961 341.313 cv
147.961 340.382 148.741 339.627 149.703 339.627 cv
150.665 339.627 151.445 340.382 151.445 341.313 cv
cp
.956863 .745098 .403922 rgb
f
167.626 347.83 mo
167.626 348.761 166.847 349.516 165.885 349.516 cv
164.922 349.516 164.143 348.761 164.143 347.83 cv
164.143 346.899 164.922 346.145 165.885 346.145 cv
166.847 346.145 167.626 346.899 167.626 347.83 cv
cp
f
177.74 345.92 mo
177.74 346.851 176.96 347.605 175.998 347.605 cv
175.036 347.605 174.256 346.851 174.256 345.92 cv
174.256 344.989 175.036 344.234 175.998 344.234 cv
176.96 344.234 177.74 344.989 177.74 345.92 cv
cp
1 .443137 .478431 rgb
f
157.457 345.92 mo
157.457 346.851 156.677 347.605 155.715 347.605 cv
154.753 347.605 153.973 346.851 153.973 345.92 cv
153.973 344.989 154.753 344.234 155.715 344.234 cv
156.677 344.234 157.457 344.989 157.457 345.92 cv
cp
.623529 .819608 .768627 rgb
f
183.92 341.313 mo
183.92 342.244 183.14 342.998 182.179 342.998 cv
181.216 342.998 180.437 342.244 180.437 341.313 cv
180.437 340.382 181.216 339.627 182.179 339.627 cv
183.14 339.627 183.92 340.382 183.92 341.313 cv
cp
.956863 .745098 .403922 rgb
f
316.769 355.411 mo
317.059 352.735 324.088 351.858 330.44 351.969 cv
336.792 352.08 341.763 353.523 341.763 355.856 cv
341.763 358.188 334.721 359.854 328.507 359.742 cv
322.293 359.631 316.493 357.966 316.769 355.411 cv
cp
.639216 .54902 .482353 rgb
f
317.079 351.796 mo
317.456 351.146 335.437 351.013 335.437 351.013 cv
335.85 351.694 336.053 354.396 335.308 355.197 cv
334.177 356.726 330.12 356.929 326.092 357.094 cv
321.964 357.262 318.568 356.51 317.488 355.496 cv
316.922 355.212 316.443 352.89 317.079 351.796 cv
cp
.941176 .866667 .756863 rgb
f
335.437 351.014 mo
336.19 353.925 331.061 354.192 325.982 354.399 cv
320.902 354.607 316.929 353.419 317.02 352.066 cv
317.109 350.713 320.852 349.81 325.49 349.471 cv
330.127 349.131 335.092 349.678 335.437 351.014 cv
cp
1 .933333 .843137 rgb
f
330.437 341.914 mo
321.785 341.914 li
321.785 341.914 321.031 346.827 321.884 351.503 cv
322.136 352.644 324.307 352.772 326.444 352.772 cv
328.713 352.772 330.488 352.008 330.629 351.307 cv
330.943 348.257 330.906 345.15 330.437 341.914 cv
cp
1 .443137 .478431 rgb
f
330.438 341.914 mo
327.204 341.914 li
327.585 345.331 327.601 348.628 327.309 351.866 cv
327.255 352.175 326.954 352.495 326.476 352.772 cv
328.73 352.765 330.489 352.004 330.629 351.307 cv
330.943 348.257 330.906 345.149 330.438 341.914 cv
cp
.819608 .360784 .423529 rgb
f
335.736 337.486 mo
335.321 336.853 316.781 337.454 316.781 337.454 cv
316.384 338.151 316.288 340.859 317.089 341.629 cv
318.32 343.111 322.51 343.148 326.669 343.148 cv
330.93 343.148 334.4 342.258 335.47 341.201 cv
336.042 340.894 336.437 338.554 335.736 337.486 cv
cp
.941176 .866667 .756863 rgb
f
316.78 337.454 mo
316.127 340.395 321.425 340.451 326.669 340.451 cv
331.913 340.451 335.958 339.103 335.808 337.754 cv
335.659 336.406 331.763 335.657 326.969 335.507 cv
322.174 335.357 317.08 336.106 316.78 337.454 cv
cp
1 .933333 .843137 rgb
f
323.131 337.663 mo
322.916 338.688 324.667 338.707 326.401 338.707 cv
328.135 338.707 329.473 338.237 329.423 337.768 cv
329.374 337.298 328.086 337.037 326.5 336.985 cv
324.915 336.933 323.231 337.193 323.131 337.663 cv
cp
.717647 .639216 .568627 rgb
f
327.664 326.238 mo
327.991 323.211 335.943 322.219 343.128 322.344 cv
350.314 322.47 355.937 324.103 355.937 326.741 cv
355.937 329.379 347.971 331.263 340.941 331.137 cv
333.912 331.012 327.352 329.128 327.664 326.238 cv
cp
.639216 .54902 .482353 rgb
f
347.586 302.396 mo
329.408 302.574 li
328.854 303.296 328.502 310.973 328.552 315.995 cv
328.596 320.435 328.839 323.228 329.242 325.092 cv
329.538 327.536 334.173 328.114 338.824 328.259 cv
343.647 328.409 347.345 327.019 347.759 325.488 cv
347.783 325.46 li
348.286 324.511 348.588 320.876 348.639 315.857 cv
348.689 310.838 348.14 303.141 347.586 302.396 cv
cp
.627451 .72549 .352941 rgb
f
347.586 302.396 mo
341.497 302.455 li
341.894 305.469 342.207 311.582 342.168 315.926 cv
342.118 321.606 341.816 325.719 341.312 326.792 cv
341.289 326.824 li
341.168 327.33 340.765 327.823 340.137 328.262 cv
344.306 328.15 347.384 326.876 347.759 325.488 cv
347.783 325.459 li
348.286 324.511 348.588 320.876 348.639 315.857 cv
348.689 310.838 348.14 303.141 347.586 302.396 cv
cp
.537255 .639216 .305882 rgb
f
347.754 303.639 mo
348.359 300.439 343.202 300.329 338.098 300.282 cv
332.994 300.234 329.071 301.668 329.23 303.14 cv
329.391 304.612 333.19 305.464 337.858 305.671 cv
342.526 305.878 347.476 305.107 347.754 303.639 cv
cp
.717647 .8 .470588 rgb
f
334.371 302.6 mo
334.1 303.882 336.406 303.882 338.689 303.858 cv
340.971 303.834 342.725 303.228 342.654 302.642 cv
342.582 302.056 340.883 301.748 338.796 301.705 cv
336.709 301.662 334.495 302.011 334.371 302.6 cv
cp
.4 .305882 .329412 rgb
f
343.244 347.693 mo
343.571 344.666 351.523 343.673 358.708 343.798 cv
365.893 343.924 371.517 345.557 371.517 348.195 cv
371.517 350.833 363.55 352.718 356.521 352.592 cv
349.492 352.466 342.932 350.582 343.244 347.693 cv
cp
.639216 .54902 .482353 rgb
f
362.981 320.401 mo
344.803 320.579 li
344.249 321.301 343.897 329.698 343.947 334.719 cv
343.991 339.16 344.234 344.572 344.637 346.436 cv
344.933 348.879 349.568 349.459 354.22 349.603 cv
359.043 349.753 362.74 348.363 363.154 346.832 cv
363.178 346.804 li
363.681 345.855 363.983 339.601 364.034 334.582 cv
364.084 329.563 363.535 321.147 362.981 320.401 cv
cp
.956863 .745098 .403922 rgb
f
362.981 320.401 mo
357.255 320.457 li
357.641 323.77 357.942 330.236 357.904 334.523 cv
357.853 340.231 357.551 347.344 357.048 348.422 cv
357.024 348.454 li
356.932 348.84 356.678 349.219 356.286 349.572 cv
360.068 349.336 362.802 348.135 363.154 346.832 cv
363.177 346.804 li
363.681 345.855 363.983 339.601 364.034 334.582 cv
364.084 329.562 363.535 321.146 362.981 320.401 cv
cp
.909804 .662745 .301961 rgb
f
363.149 321.645 mo
363.754 318.445 358.597 318.335 353.493 318.287 cv
348.389 318.24 344.466 319.673 344.626 321.145 cv
344.786 322.617 348.585 323.469 353.253 323.676 cv
357.921 323.883 362.871 323.112 363.149 321.645 cv
cp
1 .866667 .478431 rgb
f
349.766 320.605 mo
349.495 321.888 351.802 321.888 354.084 321.864 cv
356.366 321.839 358.12 321.234 358.049 320.647 cv
357.977 320.062 356.279 319.753 354.191 319.71 cv
352.104 319.667 349.89 320.017 349.766 320.605 cv
cp
.4 .305882 .329412 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (2011.i203.010.P.m004.c33.hobby cartoon set-06.eps)
%%CreationDate: 1/28/2021 8:36 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",Kl!)oPp@.s)SnJ%XFJ4Bi_=Af)5[1N*8dg=Sh%sf=""DolV4HHR^VB_1Mr`M6+_GWT-8;u83^GclFH2C,/pV=ehs<3Me](b+
%q:B@N=J!_f$cd6B_R!MB-k-"!5N_+"<=csl-.&a\ff$\$=^MLL+,Uuq8SZ2aMp6:G*]CV,m:JBFF:-8rZe\d/'Rg4Fb\hA(hZTAA
%@BJ,YRE='4nc_.>gNJTMeQQ'i[d-4<,I7S3>0$:)lOH#\*T1RFGE96!cu^+J].cV9)o:\I[drr3Tp:)h5CRWIn]>q7-eC98^Gc#A
%q;f,=s6JUHJY,.[?oPW5aho0SXe6\VX3ChW">kY$H2'-n$r;L^Xip=XoV(2QG9MTE/8"TZf[?Ik,YUPOO.h$t0B#>/qI`shs8-2j
%5N-62@qBHtB7I[PA!dZINK!8?f;<jZ>T*THk%TuHh0-,)&)%hjl`Dj)H5+q7[@eHoHUo<c5/UNhOgXH4+cZ>,=DE<31sE%2&r[Mo
%f(%ZaBJZrk6&gWd`ujZS<qrF.r`m]1$\M((<ZI?>G7UbS!D]m?,_Vk[%skXfrOPkn!h,;+HsYaeAgOOp,l3RgC&tS<N-b-"JiF+k
%B42T78$gdaoj,geLApUPYJ(\J$B`ek)J$#d2NF5EBVNA.XsU"(HV@d&CW_TT4;c&A/S#,,%CRL/fB3f1!d9?il![h-JUQ/UHgU*$
%[BV2T/*k+L0=sJocS.Mi=16i58o1P=%Hu:qN7]Mp1$cf-IJp3C!Q&rj@70'%bi?QXXA:(QH\f#]CfCbd3j)9as3-6P0A)Jrk*c(S
%rs*rW?1_;-4_cs*fn9U1%IEl95@3o)hXQ&s#@DAVS%[Brj0\XF+7m$8o-DQH<#]8#^Wb'6$^l9T$ejF/c1V>=\QoMo^1bUme^hU)
%:(K"pDY\[a>LiT-FSmI:GFNI-cq7p=j;\#J]q?Lk*4:DS?jqNT0PNS$<G?7HiE?"Us#83o+N\$^r=6>[Zgf9A2-[>G)(nXEqmE(/
%Zm2=0<VcaR"L+p)/eKf(^.[!(E-hu66G4W\ALp+5X&MFih/cCb@AD8-HKRNi1Il8k/PV:[TN8+b[=d%U[@G@JH_'cP;6sD`H6;^+
%1fF65q?iigM+0F?2te/KcfJ"=^u0_c!Vr-4*\D\QfLYMn9c?G6B!YBh9g=6?YCnq6)1Y]?WLfnp`ku0VP@grNWCOYB>P:@k<Qhf>
%n5lM,VV:EmAX_C.)C<.UkbOZN7AYK['O8)qC'3gYb[I^/%JtLY=`9uKS2i\B=s6a66QYs5FH/Yj`V%gQnt1EaR=$6^f='C!V$^sW
%2)G9S23d3:]3p=rClu<3Z:#_`-8GQ$+!d;PphOY$Q%:3J%h`LDHi!n4^s(jiJ,]!.cTf55=T@t'a)sKlkN&1c;fkX[O@#DaP)bdT
%PJ58_K%uS:=1BT9n%cH)laqGOi,6+Pcg\`'oY=LU6@INbrAa(Ds1%@7UX(^l9E0=HYCEN)R$sZho3U:ubIj%Jo2a_lMnG0&jYh2!
%>ToH[j`5gqbK69<ZZB0mb__kKQi'RmkSO00TC[Kgo3G_gf`A/^5E_VRBCI@!%\BJ/nS*BBHb_hL([MBRdXBf:\`8(,Ba?V],@&E6
%iIgC*L1@J_$)Xk<>#,*MR/s)5K0KBDHlh[Sj1kD7^;D1"[K/5&7pX=/KR+?F+\/8H-h1?/+#O[@?L'ls/RRl5"jQB53<*3tQi4#h
%pB*cbH)k<fiF`gQ9"&.9pbCaJZ>EuVLKIZb.^CGlN"*F5([N@ECtbAI]jqGXM#lALU5^AI<lra$.B;cE_KKo]l+pGm#@*Pg$=;-7
%oL`H3(V]-<]!p=5HDBH*2EYiW*q8tFoapfU)q58gjP.DDHNT>PU*!V<3:nF)R'6U^)t5!:J@na0T;&T)P_9'%i26hgLuQ42'X$l+
%?l,nr#sY.lj@f<nHkCf7q0Y@2HcCt\g%_G(Dd1r*\i8MtR9DF_"6crqQlnjY^s3$5-"(Khm_Ud8'%!?Y<655bHm#*j</(h_'K:/Q
%0t9Nj#Sr)]!NWU75=H-%H&r:q#Wi0O+S]be?/"FDbE+DNglK6O^.TEop*@'HkoAIFD]<YLD:lt?Of[3t"])57#Cf[%,RC\&\DIM5
%$JVj+I*`(>%K'TNSnm=LG6'p,N<1Vf*t7N7P&U1:SP;dcfY:KqfYc3M?Wh7nPbkFFAT=ZS/G>@*kJYlH47p"c']Ve`X2l8P,5"$j
%0#oD6GFYu*bD`-pdN#8:$c>qTeCUA)1ee@6$_6>e%YTW@/+JD<>NYdCp=5u!HPU<Wa*/Q+m=["?2R@hlnkQ^_K+m9ka8!>a&,jbs
%`/0q>Qh^Q+O%u<m3&KtL%0#hebuUfIlXH6*-2O-7KtlL3m_!@:6MargQ8'X(["")2C+V7A=2!180:0LJCfaDYh6=5I=TZBD],_<s
%Pg?D<8ipi#KUGurDKPb_i]l7+kSqC*o>]QPB&sT8Cn)e;IK['MK)'0b80b&h":i\_R8t#NV*O"kjA5gd:P$H0=?Sb7VSGS%:,b3u
%X-N*u$>^F3Ul]:gfK5C&*08c%D0JV0UqeVa4Xhq'gW,r%8H*-[egGG15$8MID<"`Wa0o/CJKt:KV*eYE6tEdY53^V77QDGa$[uhA
%258ADL<t0Eg0pm\9-\:1i2"^Sa5bV3eb@5Bi('/H5K87%VUMi*1ENZ^TG*XFiV+BIB,V4<!'_pn)U60;[9F[uqdTnT#S'f%Bbi<%
%SPn+!_E_@[_0?+p*fUgOZ&)i$%T=o&Wf9l&0-U0(C/V]ff^-#hi>*dddpSCITul7LEe6"kR]We7FIVY3W:WA']O*(*eY,Z;MXBsF
%c%6A/nIo"RL8UHIR:eGn.*OfcksK+Gg"cYScCT<)VsOHmrS#G,[57FAL*AEfh_#(rhE]sN78RRXg<Em7R;4a&m08Z>\TTd\mb_Tc
%RV8dSd>A.0_4M_Qr\i_.a5obqJ>@]K*O]tpcrCTK"nUJi)&"0N@o+aE]&c+HV-@H62q3k+L\9ej'G`f=>"_AIg*BCk7LE+HEk,9?
%iG#_7#fV?BKiU9OeUfV,[%L<rin9YTGX\9h_J7jiMrUX(IRtB87kP*4.1A;?=u?aVQ@i?Y%k"6iX:I?@Uk7=Hi)bdn"8B8DZr9$.
%$ooc$6q48G7RfB,YE=Cn2>@U[?,P]ij"[BkBs`QuS/@heMKPuldTFQn26ePp$8bMpZW(7hJt&:j;@-."NR8Mj@RmiCTNb*t4u(]H
%\hHFF>#1u.VpO0_WJr1r9oK=gB`^qm@ec]jf,LNC/B,FQKibisRX4FU6Sc2UlTFsU!LZO!0=HI=Vc+$Cq9`t7h(kY)"#,)8;1&3f
%b(=ELs/%uSR8OC9!h#5a"P4#l:9tX*&IH'X@N`)(R<g#q4_[(P_B;:OnmYRa2i[tA:!DcoJV03l#A^p&@2,:>*5poW#hmhsGs1Mk
%;>5QA_+ZG5V%HrKk3Z$/2_bna9c\RZ4J:N7I24"]-^hg4=j1p-ZQ/N]F3#d?)bkaFAsPe*6BkU_H'UghjcKK[$o*ASUkij3ElaHh
%+d6BN/@&ukV,S)6]^[Ok4Ne\)OOgbNED3aao#;>IVQ';\ApNENPQ@'7l"Mfqag`97##\qfofM<%Ul&)UEmj3[:Vl9W"H,L(@uphc
%'OJQ<>qtB%X5S&9!*Cl6b<8ar2u(2,biuK4+mlieTViVW,shs`"upCX1d^ZZ'.NV&[&J[\KPVDIRoK;6Kp8*]a_"tes.saC4)9U[
%@grjOE37im<6q"K5H;t3fNi9JQ*k3cBT1/9hT5J[1Q.k7+u5(Kc/N@\ejcNmSVK)t.qQ4>#!4OGi2+4<peS<S96L&/"?GEp9sI<&
%q+eL?\<d-9M3+@6UPt`_anGMh3\Z->\*Kj+/IAkAgDXo0KBkFN>1+skg39$9[D9%A'pcB-aM\W`Ti^l&Y7Yuhr5^GY1(1b=!\^mq
%b:N.'1BT9[beeoI'nr@Vb:N-<$bX[b0=/HP<`umS_*8;MblUGfSB.CEG\.P`WJ_nT[R9?3>,A2/N6NuVQpsYDX*45ilGufJ9b[]o
%lOTn#"PgHO[r9/Q'kqWSp5:EKgk@GoW+(W%m,)t``C-!OD7[jRRRZDgCWQ,PbY1#lM.2lrjZ'lkBo829lkZM68*q7s>AqYe`7YSp
%97Pg,)k<55/U56M3[CU$-*PV]HHBqPFCm1OAc/FkShim:lcUP\BnlAP3>0'5D8#uZml.RIr\*,Pk,?JMgejs;hb9Kq7)aZ!0"jgG
%o$l?h(R%5H*t4f<daYr"f3U:0:HMu$Vr%t7.9!Z67OBg0[p\scOu!t)A99,WoimiWq3qSD1i>kGYDEXj]rST^FGm9M>-hAj6LE<e
%>#;q8bA^Cd'pPcT?`QXSPsOmih8(1fRhX&BX@L#[@Q>_u^Y8bgVm]G/)=L&_U0Fbt46Jo+q6TSfH0rU&eIBS<VA09`DV<6klD@Fm
%c0k4n?@d8m>ajDnb5CFJWWPIEpRHM4TeO+,n$ZKc8$$nR?>1U%iFs_kKclqWQMN6]1:qF:3\@q2*Ak*T-><]jj#WWuH/DACr;M]-
%mEA=ecYT>*WD,325sD\GdHh#31u!>_@.uKMK%UJ$W>5N@'BI&NR%5@lSKP\TLZE%paCiY88o2YL=-0`jjAVloB*ZLj\oH^<p2AE>
%2_fp^pF6hp`poYdSKsi9Q2,&LlHNImIrlGbOs<`V6+Ira?8eiuU+6)r=MBU&T*S%Z^%P%$(,jURNo7q0p1^h<NF%#D(@t%rHem_t
%P<pa7Ur[2>"J)dH%_qaG7FN4[)h=OpDN3de\(WEpb/5ON*$O*7[?bR`'$uh/mT.'+I]V=lDFn.FTXtoi45:)Z^'.;VXsa[hM'DjY
%H>2XH)Br[iT4+@dQLU@ASJRD^f!DD7gUgPS[HSG?\+FLoD8#;r<bg>-In.N8D*B<DcNS25F2_;i+(OU)Qroqc1,078*lGS!4j]G*
%76CM;LpJ%^5J2^a1%eF\<adrSnfYn3_Aa^26oN<SSXX:g?Vc:"%-mlOZFi7.gSJZ^2MHPX+UrN,PJZ/6,RkW/7!-l$Ur^Oe_Jdjl
%[h@%$Q6rG7UO7#*`Q2n*ZE0NM1:Nh![Us>6Bf6X6?^Tq&=r]j]%N]mZC'TaDBppt79Hh_,(*&:IAN&8MO5Wc\guE_#oITVh$[qr4
%<M>Sb>cm_G8:m>piETGNhNZs89e3LHLLtM+?CpdBH7b(pea$UZp!sq,,tnZ0pU7j(jVCnrQ>]b3r\dgT)JKflZ\mZ)X8#Dq[ANpq
%W:C'tBfU$>^E(mp5>hc7:uJ*bqZ/ieS"r#`;lHj2)TC6sUu5p^=HK1\maZZl+H=.'!1jm.mBBRudM+bJPtJGg*QaNP]HY]o@?j;B
%`GsA%^EbAM,FF.V'UH.A,7IK*6<Xk6jkXMef.[Ci.AVRLcf!D'NLMa:]0SNTNQ@3F6HMfM:*iV/!(0Jg=a8Y<f$e:X!h0lNeOCiI
%XYs'_&ISXq%(aDWb7fM&BmBP3@?@-ZXf#&_s'-]/VB==!D-%UPEXcVPL.Ua_lR!K]U!rP%6:"$R?R:]H/dE.tl]WVhI\!k5i6/&N
%#*9V8B,Z8:j#BIFs)!fYrXVb=9le-W]+f=pkPjF'QQeh:g\4q['$U()CsS*tF1@K?KD1fk30E>_dG>gbmG#BhMqthrHrDS14/c,*
%BegMDE)O2FW`OjJDn(A5gMF@ES$hB]MG2\so)3aR-YJV2[Rn1I90/8a1Wah[-/Z"Bb`-8$2"qFV2*%7(LI@TJOpMnf#WiJ.k@(rG
%-:NI6NR#jb-.RpS'\oLG@J^&k!lsBM68rcu3,CO`mP0JEoG=ZYS>Q5FQ5^4r?>b$uMY(N4:>MR0p)AKR^43E]/_WP#jE7qG/ng^I
%>Gc#!9MNDW:VI*Z2<F^i45F9.?D>Y_P@?7o8'UFI1Z^3N?ao]Nh6Y^9s1;WN^$HS*$5T$&R"d:mTeYY+NFamd)ZNB[`d]=QA*c.T
%ZaWu]m"4-T6;N#tBBg5#H;eHWlT'q;i0M*=o<u;jo<r4UB5cjiiF#CS3m?I%3Q2CbHR%_G42KN?*8HcpcKn8q2gIRcd94]YJS*M%
%?+Z\<<iY]!&fWdL),"sAF]PLs/^!,iQ"o*k2h^"MPio,YitdqsgdFm6GD*q0OlSIU:&>0jSi::ZB"ltnnC<hY1Ns5l*7>raj])f-
%R[r7OM9U_"DZ"i+)Sc(Lf:-Gdh6Mi+MM%q8LrQfh>dK7+1iK3p'%-2d5suq,%^Uu2P\\uU6t9E>pai-oMeLn-LrM$VMrHYM6t+lR
%BLXInB$lQON+UGUSp8kAi6RG6O)RY3GB17^lo)^Fk.BZV8<:M-Kq92UNMuH*+`rY?bnNpu%=GXO0mgI_J,=8i8_VOtpF9Fr!0]Nb
%P>:15I8"C!g2?'Ac2>8C^Gj^,bl#-nm-gdT3cDXFG7.d?I*4Xd'SX+Wd,RcMe]d!A3IEW<Ds$Q6*57iY2o$lc\"R7k<H[Z8qg>m>
%[WsV!q/3"SkO<orki^oSD-L!nj570Vg%2\Pi\HM8G)bUr#mTUXgMJ.(ieYD:bst]?M-feu8(/g)DGsXbNPd[A@VdC(B#8=1][C]m
%'R&]bO^>fUW1I0)4RM-Dq)@2"1<BuSK3u<4$e&c:C%UCZO]Nte]f.X%Q=>P[8[L"3BN)OLVI+VGYlJ[_)6b'Oc9+[<DW/T+l86RU
%s5lkY_l#`&r4D^u7$'sU:S"jG-Ca?@a`8iYKn],kd0ONC@4a%.oC"=s1+E,2;WMr'O5K%h-EM'AeP<.\Pf%h"kjAYW)l[lC!HaYP
%Tm/@USJ49[c-`.4OI:RrRDoN"G/[s%oM=Vt8!3R+*a/?,`kg&Q':*VAHird(<C10+jkE@aJAI3W$#*`<Gn[CY9!_(;0C%!,leh&!
%:YTbKD27)";T):*X0l-B\tn'@(,Q1nG+32^U?:NUBJ^YWQ6RfEHhH51$-,"dESsE^eIK^j:4ZQE;XIM7Ur"V`SJ5*RA9T"N4nqZ:
%@Q]*2pdlW3X#@g;`D(^;TpKtmBl8!LJPHQOT_:2:29Mpl=rQ4iS^Q"qaGEL''^/NE>\(rQ;f"4[[[ZqHb)!h[k(BI3Ng&r`Q%>Xe
%-L+_:NG:VA^01<1AoJ,1A1c]98sD0R9YV6[$c3q-^\JAm=XD5JoVHG2,tdtk<MG9`dCpQ%MDDf[lXn_BUtJsNY<Gn<!4,jns2e0o
%VHT3@a@uWr\/ht*^O)#;lg:7L>*N/Ab,cB??X&Fd^.l!`Bona3rHTo/;8fOOjeg,.nuNU<qJ/sV/CO0K\d?l\gk76'9rt<c`K3#h
%/T:?@ZVm'fbuWidh,eT;(?-F,`?])8X)9ejX3<,MYHFa<bhUmPM$>WXqF=jW33<G7DTodM@=,@0qKH4,1D=m1SY/XGDXs3g]30_<
%`KJLLh+Z2o/O;=^gD7g!AtotF4DJrAl1ehrYn+NiTqg^\eXjf2f(_1Rrpd9_hg,.UI]WkTma:.,.'"iBP;&2=pH%K*h4P@MJOnU4
%=(%'K^<H)UKqMJIT(-DnTL[7=D$Bq+Q-Y55]s<aAWX/\=am&^*W/[/d@PDPOp`2h`9fjR.K7<@2j='TfT>&Y/jkAP.m]TgHJ_fgi
%dJV[j^MliiIfsp#HF<0Ri#FkX5We,4>&Vs.#ft*RiBKBONBck5CcR#qZE@])J5]L[^@WuQ@$i:6Pk>J/D=uPn*'PM;?bc*6kO@^T
%[/C+oA9KaN59$$5TCCqCmKFH&!`Rb_!%$^X390j+MAT7OWO!\r_JV;C2"j_nc[5ZO-eB')>Yql3D8Ld>poj;2FTqfs_-[:/!sK:Q
%GQ0t/VLRgU5PE:iS*si!c1QC@]2S*='+9,S<"/=VGmU8MI<kUgIaY<+=8sp+70ZpcNM%V(CmKF83\:PAi2!pD(#=E<L4:PW&i@O+
%er[(*97Hr%jT#7[S)6'F-p9;/I&3^24.^rKkT'U.g7>XVqA+VOMm3IS1n.82cPoZ[<!W*sY1>.2KO`8>RY_5SRL00nWcX0tq",06
%!m_j@h)+<LBL["2hoQT44]/@=V<3feOeNbaUo6f&Br"nrM)3$AKu3,9oO7i0Vh<q?cZ65<D:YUMr;EBA]%RJ;:.$$/q_112r\*ui
%iV6=os6KL9Y-$J>rAb&ZI01a?VcGD,*\kBF\pi4OCcA\@&-fPC(-^QK:Pm_12D*lu:"'Y`&K;[#TkXFn'#]Il\ln!O7k<E-SnKIU
%[lmG,6.9f.XCY$b(;j+TJ"iA'?N;s/r*\XWc/r#NSM[rdD<uqRh7[th`K>,.biOVW`ipSBag#r6$.a#.T!u[QI(mA+<GJu._5Qai
%+QmIH(1%<<A;iMC<,;PEaO^_$]0Z<Fm"0qFELtI!0bp.D+1b0d"_4X\BXO=BmBG&2EENdr,6:"\HnbiGY^R3c[L7ffFq_DI'qUb`
%R0m3>.tM<5>HM!,P;5TAK:WGJk3nT!Iqds]8>\#kL8R?q%R(W;)Ij5AP?P/\X+T\1-aD^idt6NqDJ_4SYIBD2#GqPqJ#m,Uh@")K
%DE<7jJt3f9Coiol^Q#$7(%tU#8P)c?_(\k&l^[sEML!^hDGUYNUWRea1E$5-T$4m*b42=^O"ojoeBZ[_Y_%>QRoniW<91Ld9Xc$!
%3j#'7QX=:Kg=8fm;uP#gd>3mdTG=oo>In-<T7WImG"gZ_@N>[?mR]3J=#+?OIMjq_dN;SMKMqm!E@baEB*)Z^L8d\'"-;h02U/KI
%[j+g^Cq"gh+YD#t5]mFC&2\h=S\mY97A&^/AG3is%GO+abYe.:2mZYdG(Yun9_;Z"jTcaeNN@)991[g!V@u1=f:NtsfS8WnVI><,
%9Upb9AP(Wu>RuDF:bgZ)1KlG=^<F-khS&U>^3'=_#;=m8B0Y#J51aI)]>R%,2i$O<&Fhnc)<&+[qFF!_hkKS!,g7ATQLk>ZA1Sq.
%%M)s8bpsCZIX*?E[3WJ#H0-D>%U`a95lWo>MXMc`*%aUfC<_s8FqD*.[8)57-\]bF7bQd!-Md=3ZPEN2&ksoE)^ptP263BdeHD@5
%9*d&*S@*r@APc.PK?hGD)d"S\_7eB527kU0[kkR$\!]5^3o.#'<;aR5e06eLm54?b=caIDAW*aH^1]@H(X68&Uf"JMdd-UH2lou*
%ouo]-Sb8'WT4<dL4[_^[TWELB9W<anAHP=Sab4OYQ:_of6u3Q(]4'kb6AAMu2NFZ0Oa(E?f58>Da#kXD;Xs;\GCmh;0/s=qqor/p
%BM=j8QJQ3\[;%45eBI!<QlNYJP#gUO=F1g*@6>AhCi:+Oo_!/21P4FsQ@g(g.01HE35So:%QtB8!US%j6XUKie(^r4@gJJ_NE.<<
%FK6;;ZTp>#]^W7>2I8jlOkVM]C,J_l2dmYL&puc/ll344JTL<Yg.\F!DI,_3[2i1+MD9(7=)=18G/>>0D9/6&Fkd/>UA)89n\dW8
%Y8*Anb2Fp+$BAhEDuS;SRi#3,UV2e?9o=Nb"`r_P?ki/`Xo4\Q_KH<&UGN#,^=#_<d3]'(r^$9bA3af3FN)XmUQglib>$1jrrr8q
%%&MlniZ\2:rmbbl]?%dA_o(!`?:`[j:!oRfG4k38G:/RbaqlHA)O4"O<u`'B5[S`Pb]Y#9=0<3`mZKjr]Q\gF5D\k5@f0alLL#=f
%[ZZfk5l7-@>33d^pf*042>Mjio54EE^E%!3FIiEJ+C^;N@IN9a=f]?l`J!.Le[?FY=qCPuGJ!aIju+?PW1pTuHk:BUY8c$,LA)XB
%g'u3Bj]iehD7*5Trp1%+1'UWNQums)Ze>1tH,0`9qV2[FAe`[jSQP_U9OD=&eQUUt;6tgOr<W=dbU:<4[F]BR#9@Y+VgGS1M-Igq
%2$Xe]A9a!p1hPT%#;cB48ZY31(eou?Qo7-=n,mmTa>",e;tF1RGp<k?o9^M:J&a^;=E;m#el[77YD8K*K"o;fAdrD70i*e_3Fa+O
%rn_/Q-/KP7pRtc`fP:LHU1N)/,TiUF09Kk(qBcJ*^jlb/VS+el$ECi**28*1^n]mn9PZkN-h!$Fi(<e4#-FXDJ_ac(>Kn0B=1%n-
%Kdhc7!r><n;-Yu3dQfKU4[sKK"VPL[Fq]nekXi16172F<oiCfg+fs3H>DOMrH.E*k^Y.fT[Ihdqh:`#RW=ADc!dO4X\>+";A&65Y
%@4=G:$;]?]IAn4d.m.CtQ&`N,e+Gib_G8K@fZNB!S9p'/l%0OcU$::Q]KNI8G1tErCX`f\_rYLB&ls_u,.$jGfhHo;M8gPiDmf$J
%AV%lbXWLm6#No1&2,CO9<S.'_?Cr?mE&slH"p]'/F:4-W`?<-Ud>8u3XgW3A,hq8"Zo_^&h)B%;JT`ZGXV3D`02dh3nOi:$`SBqs
%c1C)>G2ortM>;qe#X/4XP9n;Qc%&Z,_$?Hh>R*GcQ]9eA\<V&p5<_SBQ]ME/]D+aTl#^^o$6NY!S0A:Lmh`eT>V(2K"`15;#N*#A
%83`$`AVXe-PcKf@OMb*4G)q6e@U'%6j(aq1GI!O6IEb(1GaXe/Ml],U1/TbQgoOqFJuk]^cITege^,O&A^G<n7n+KMb6iMPF?;Ak
%ch+Ql],I9aUpS&BAjkKsQ%K6fBA:SFZ=8h0r49tM,/XE7)freNZV:YR-`A&4"OH'I)@9d;niY*JX"YIWHpI([lE$t&cl^lq+P\8T
%+u%/nN"Ih1YZ!]#`3lpsQ'aR/-"0mK8W`HDN[k-_c:PEJ%pEHhEH42pUKhSIl\X9F:lo_(!>;o#&_!fM5gUoO"&cY1V6K1o"`IJJ
%@"*W'0[.l]KKQA:>Na9)J,40LTjY!7VqN.(T>!GW=nZSO<'^;IL+l)Kd07'XDdrftN5;l"DUlnEY)mr<<,Qf\jCSDW<bmQEoE[!V
%a_F*l"Z[:T<=#tWl5/-XJPjrJV)s9Od$VP1KaE^G5\t4@!=M$IX`jT2-u1k2`?iBQikXd@J2A0.eIr?pNWUc?,KW+^##1jBfG*B(
%0F$22@5MS/n@0=83sjW3Wtqq#"pi)U\k3"ZNT2l+33KK?lS\mL#ORGp^e@WkpLfWj3'NO7qrkE7buSRhj<"K3g8E38Q,4'j3k^_j
%:KkY:WrqSZ_t$/HRSNRPMUplhMr)Q6_R#oiYA>0ZK`Q$?J\7G,&.k(%@n^eu;'o@I,</rR!FY(Q!)#JfMHU9#Fts!QJGJm&0sn[r
%0R&oNs/VDZ7f*#(_u[)cqbg&0)$,&,$$6<C;NS.Gb-8;@"*,`$$n*O:X%1-n'4m[H6@Kb^ZW4_3iXeN@WoYUa9(*+.#9Z(Mjo(#W
%DmQ)!r+)3>Bn2qo8Y;PI/G($j;I(N8#,']PL5LBrGDqXd?>CpB8g:Lg?DDl_2_pIe)at`,HtEL#?rh\<fN:qI>`Th=o::N9HtI`3
%+GDK1E\bm!n5q2<(HcNu!!ka)IW/c7"EZ,r>lSqd"X.B;c0kC0Q^o_]@68=rVFe9Y.J,n-I]2a1FPlD;`FbOdQ,CKA;#i#.9HZi&
%+K$=Tg9:Jjf(R#TBm;)W4IA1SdDpYHAj[b8I\tNZVa<2i#%]C6k`'gsCgDU[a_bBf99@A;@qc&m[rY,<'+]:aO-J9MW#Y(g,):IN
%G#)\@%hgC/@hdQm?a.PV^')@H$7g$Sh4#K[pEj;B#'7k"MD-s_&$J8NKH<W9mP?0&(jJ0ZP&NpX<Dak#W_>I+>Y3FiV$YUn$ST[i
%2@g]@<I/[sYmEY&K+lM;q'de2]3K39(lRR#mD8S&1o"?g[O%MP#_%H=]iqlPl^8[t.uoZ/DV&VdZM/q*YoAEq`s.<g4,Cq+Z#mY5
%Cc'>um:I@ag<TtqK"m!;:qQ"=[2$S#2fSn(>D/h7NNP=@Js5)1euDf_\f(TT!uW<s(.&(>$:0Tn+feZ_S@YI.+Rh9OGuG0%?DV<l
%Ge^=37Gk>)G>Zt*flD0EPKj<u0EZ&DUZ.N+N_ZMM4:`C!%d2/i7Ku^o@-+Qd!3)1h3qt".TETs97:fUopigG.%R6<DpfFegBu0@N
%RZ1"^UnVRBVe6$DNbX3=bJ^?jP_"C\%N9kGVVB>ARp.XJdPjIh(@ZC[YbWjaEQ/QJ`B&7#=+FGW,)+,7Sajd94<QQGekG\B5G;g>
%dq`4H9j?9_>d$-oH7l\-Xn]'4@S$pL"3S$TFE\DASKDJkkc#PF6'V!lfZ*ZuPOQ.R:AUnpXiD;n"K]_LYQ/+nlIjlZ3+^:/QiP\9
%jSJt3X!g)tfX_EUM,8%oUo)elPnB9P3e1>h^,i2JY$,as2g^OqaIu@>Jtc>fhQ*S59R+=N7V+hP%GtiA.-OrgLLCGcCpl!+/9hnF
%dsMPaXCCfE+fF]X0u_i>k=O@nge%+X&E@2\c=omOa4P/p-%8f4aei99C!(EG<p0cb@MHS'WPL^mFo@S#=c@U5Ch-:pAZJW9I(KH+
%U3^"&>d3P!b/'J7fdKJ+8fS6qbn4R,&7Sr)(-C'T(pQ[^b_]T8h)l"T42J*S&pDkO;G9?8Lc#]8osaJ(f!X'beMEj?6.Z>j;TD.r
%8F5rKa#W&Xorj]`#@I<AVkc*]i$`S;33C8\XfUcGh736_gVZDos0tc^U_\8Y#WHX'%&qrSalm_&^!^jam%#962&k?R>bG%!^nK38
%:C@J@,V@<h5dG(1$-b:gMObYY6NEp&cjc&]HhERl:p"k<#[p,4q!Pk"X:4UD-+T1NgKei#;J[W_9iYPeoO\HP5J5GEH4hZdq)XJE
%Y6N>E!Xrkg6KE)lMCA7P??.Q0`:Fr7*"PNK%NA:1qX5+NJH8p>FL1)]!HK3JgMU8,n4qNXcm'PK@<9p%irS)h"N_l:0gL'@80u0_
%$"rc&8*36bWB0o#r,p(n+[\BEOTS6=BZE6pGE9;h*<53X:],,As*9V(pmLr3be(=e\O^NsD\]lm]u<If<p[&P(_^Q'e^U'Pq\LO=
%X.#ut_nu,Uk7iKO'tUSnc@3A!i8`hngW'iVJp0l6XTs3rq2P)KrI":>ET_W3cI2X.68ci-m`X5.2W_X&NRqB1G3u3.4.dS^DR=b%
%\$Tl;H?6s3mhnTmpoSeLADH'EqiZB7Z+e`QCij!N.ko2eg<Q7tL3h_$T07P/Za"D'LP>$R-fneqqs`t#=?DfB0VDW$c)nQ![^sFr
%TC_c3jeZ4q\^LT?]B>)JjLnm!B]"</s&OK&e17+/cVK;hG2Msgh)DN$I``ZGZ>W3n)M_Pq]Wlo_qRj)eajq8d967epr)VnnL*:l.
%^4LSXSpl.Sk%bpDGH7Y;o5<OBr?)^eq>-ad(-CD4et5-Rb8nEp4,#>#?^gKK_=ur4Ac#5Og&#qWGIW%(_39*[<00':DtAnKc*HqU
%^2Rs3YH@!MX9X[ZQV1[%2[U(&QO70id??N8n"$YIbJ=@2W\/1\m[Wmq_H7-"G4kjde`rLaQ$dH:l,2WVihp+#kO?<36ssG5mJ49r
%_oT5ET/UeMo#(=`j5%*X\,PW3eTFqSVcKs+hA2"cX!6i7>^YCR"-djKL@/9hW2s#-.fh3,fR5ls]G0LDmXC^HGeZ&D;:o3ipNCW"
%GOV?kiq>lfmtk7^IT]p*;u*q<T%s3:rB=r>!D6/KUO0L%+6?`&We$slP.t+\bDJUC<-A]?q;-"/-!5Xn]!M1*NPe<biX>EG+>Aao
%Ed-9858KlUf%$\k\!o#f^9G!?Q$Y=ES(k`pmu545:H"Q`imY6SWh[%af@MM0?@JTuN+NLsmH#?O$p`pH7oT3<T7WG[I"5%e9l81H
%I.<TF%E?ps>CM[kb.4;,\&I@kb)>_X61FAm?CnfY[Jm7Pr$6K.?LHtLn!A6>8#CtkOE3Y$^BY9L5&@t1qQq&9M4$<=X^<^W]m7#%
%qjCctpW_^^iF[d7$N1/:MbicC^#`82Sme#2A$PeUDngX*g1[tA?e_WnDkGH-Gttb!@0I`)/`rQ%QU,@5;3-oIPDU.m]7OJB(*E;5
%9?!@@)pb'Tph.dKE^rpd8TSD/W-^IIoXrqj9[/.=N0.GMrk%kECcatOp,uX)%?d`8i.n0)#H`]s\NKYkH"*j>.Yd?aOqI+H?AiF4
%'T'o9Z^!V$/r8]AQbSi*bJ)%5\%fJ)Ooi:rhVn5*Mqm0Ur,/KQqV3mFMj$c4:oV2W8NLB&[dl<Ophdceg"grO+ogomhW'/Y^b@I'
%E3Hco0c.]/YLZS'=N9UjgZIVn%`4Lido(CjFn`iK(YA#?"#O08mPI]IeP9,-kZn+sD_Bi"Ib)PT/R3^#LHU'iJ5!D`q"XZ?kBbXa
%:E\+;pi^Q<d8p"O;U6A4I9p0X5+XEI#H&*)akY9]o5*I3d<8@?oNo4`@Fc6Sbtep?>+810QY,K5>^Zhbht&eM(Z-=u&SRrh!Z'5q
%5!Ia&=o%i$m\&-W'Sh#M49JIUcuorF+(]LHhB+X`R$^:n!66$KmXr3icM&QG:a(l@'Mic\^Ecdq6)et=E9E`&!<Ls]@;@kN"5di/
%5_+cGk(u8##h8-?F*$TEr"o_8l7HiBGP;oG4I-b2Rlam/BG@Js<u"-k%Y>Z8?bCWl>[$$,(?eu>k3PrtiK&.@k45qC7MaVA@t18V
%4d5?cm>X%P/+3DCpBUK>CZ+Ku:TOeFmcX)g;^4CR4a!=Wr?HCBrjO)"9E3)Qg"$04K?XSr"!03ir?oS+QQXVfjjsA^km:uErY.Qq
%ZNb9i-$d"1mc-O8TU.;8YuTGu_.0\?@VNQ,6a'rPYL3?#\a:GHo,;`hIH"[KJip0QSL:W9Ml$6_%IEfq%>_\\U#*#S6Q.-EG+Cm+
%(^,)@@f<:'K<`B@!88FO0SbJ*.iQDirqN]#PCCR4j+',mhS9`sqG`=X\Nq@:Dt#jRNG.@"^KB3J./-,j<IDoE^^)q=YWk;]^"FKY
%k"/?:O0-;R.ArfU8N]Ymlg^2<o$Ia<%m@P^#LP(VJDWoYE2@dB>NR6%(j4M%SN;;0Kbm>K42bRs%n8#-6L%+fS@dR4L>g0eQIH/U
%Bbl*o2!Ua\`ta?Fq<eo0J#pTKbZ]F2L2]1L^X&`PqHHU&6[TR%::ML\/.p'3CQJ*H8>"+`"\M?15:)gEQ=VlX<^4SWC/0YraX<G]
%R\?.8aA<HbN[DRjr!s@VonXJD,-g`=YlIR.(fs.qm7BX-)5S/[\GH%.7:D_Q51,H?b\OPk6/S*N+'M+MVE[bHK-H>#6IPtGd4+d'
%3/YhG/Qnr*OcT?dc5[gDd.eWoRH2W&4?t?k\*$c>=?T'q8+`O)#Bgj\WMRDI$Wk'aSq;.]As$E>@>(7gj:4r2?@W@[U,AUkE^t%S
%1nYY)Yr0"5$ln6MbEr=\HSr9=3pn%Pg/p0)mjr@jH1t"5g?&3[P6W+hR-cZmfYp.uNF<b6N.f0;0.D;<Y?p;O6SM@R4q@2`?l5>u
%]Co[2Pd<"15:=2lM:*S.1g]daiGL8$S_D%!:VYZS@IhHIm\"Rp3d964Y&>r\XNW',Xhc]f%=bOW]qC"3^;J#:Ck"SDT%bdVpELoe
%StHO;c"JXTEK(i(mTTGZ!I4g?Sf\Z=[i^#=ejn#2p3AaoipEcWC2U6<0"*ff@9].u4#.>4`M[P5l"#Qp3b[27(49:]#CCOJf:Tqs
%`R@nZ_j0Nd8)Vh?mfiCo/G&;M!U#FNW.b2:b'DHpb/eR-i*C6(<;cI`\5<,N=4U.4F(\m;58$5F-XUk?\d+KI:2ma^a=3VUYkIm5
%Dh#e<Jmm*=6N<#e6u/"3(".PmHkaOSSeTM:(S:1'YH0*Y_4KG/=?'Z8?Wa9kH+^0.$g<7=@@pL*kNN%+5do2:h\27/In!'2UK[CG
%kcr$aY8B)S'6\q7R*/g_K."n5rN3=(XS/O[XX%2;fTQ(IiJRc1<*:c#4auB,\)+`pq29r$'4mWCAa^-&qs)JDVdWns*qej"ip#bt
%P1lQ<.\"'cah(#Zkd(EhZMrd6T"s`=H&K500:s?B.r@1j?d1UGmL]i.0AU"2kdffGkP83V)h?31qF_Qike3V3]m=u!VGpg!kV)cp
%hgAfS6XTI\p5PUZ-`t+$58Z"-5?utoS:A,V](fh%pfR.>k:E]Cp-nsiG7jb7rR:c.?,[r6Qi)R5p^V_G)*/+5(orpJbs5;#&o%>R
%FJS%[6Rt*1E:bZ9eiUC,IC8kB:%2GLE9(o<]m,#C4PoZk8\@lHjpnjMhdC:B\'9oaGPqG$4J)#0+Yqn'J+<0De"`3%?\*TY@6if&
%k)MKla";;:Z1e$&2AY=/S_Do-e)()5gsPHG4Xu'Vc./7[qQs\IN1MUkZ?e5"in$fIdnt-g6u^O3Nd$0eHb,baosNeHD/@AMKAq_.
%*qm&t$(IVM3Aqc1a_)\g$i@?>;UP;J/j=R\q9e:VY6[m2XAd(c@f>`5G&i&ppfs$TH*<SuW%;kg^AN-dl)Z+T\'uh)i$P\dEpJ(Y
%>$Q?^[\6:h&75gSEZT]*MH&uA$#UJ".rkFZZ%L3Vbh)T\3!igMV4HN0=W`1F#G',Y8+JJPJ*_4uEg+.cn%4A6ma\f(X)"WZ:<kau
%hj*>5]s12fTS%_\.XZ[/]mN;?a-=,d1ZgX>::CXIpgL9A[e=mc^l\;6B]!4(=aY4rHac3CpJ#Mf#aF5qqjYVqj)ab_W-GnaeD0HQ
%S;l=Ec16=#@DIau_:>m&$]qOj?+702nkJOcB*1)f:TpA%2#[+CNV9[8bO$CQHsWq(nP3NOh`cpe4KP%oY5m&<49D#6e*GHPgA/nL
%W90<4F]de44%QaI:Wm2H4']'tc9#a2A]:u79<&G%g,lnGICV2loG7_G&19QoB"rshhr9T%0'@"mj-8-Wji%K#A9IA>``gP%Q]Y4>
%"Qt*7RZFTU=fkXu^(5b`^A5!<2#Ijp98-2KjGo+KaOe(OSma7"YAUH0]rELk;SqQ/02]%:EV\E\fK@./gqhCXpAkKW@IA7Fe]5:m
%NRcH^+J6f#>D8Dt2bt[A;6e)d[J[;>>s?oegMb@)V:GTdmga"Dj&Kgmq9pAafr%_L=iXCLqf*D(m=eelEBeYN4M1@@G#qo$!n^)p
%8!eN`%@bF`+4h=scQ+6oYA^#6HtXgi/NbcVke[58ddb!UkXbl>Mk;oBI-[(IOF!>a>M[Pfr1j)<h*pX>mc`lNSHQ\ih2_?f;)'uJ
%)`oT5,&H+85)is7BD5#Pgh/;_2n%V/MG$H7'_UP_qA6]eUR^WlSGDm1Hl^SX)oFq^<!OgN%0?<'$d4O+UW@7uCk3PuoO;>/8aC6-
%ehA-Rkp+DZ4R>8Xg[FUFIeNQ#rGWUV$C_10b5P%U1nX`2Y?btZ"Q*ar);fsbUP\j;3Q>jt?lN>E^jZ"9pH)IlhOU"3ee[-2GB5Fo
%Mb8rLO'fQ$'J"<U.5A;W&Gg_iB74L<,.[OBgkfn$-l'Y*GO]89)p'r:H*)>^W&j,1Hu6'REj`nmMWt]@%HSs=?PZ[+'jnUU?XX&^
%I!)r(g(^IVV:FA;?+m%Pk<T\"XiSPZgloC@CH7W=$>OXKUetuY!=8>n!!R/HpgX,<@:1%V0D5%rQSsfj0e@_4UibeIOoR`@2*Tug
%Y_0$\YSj'ZIER@mT1AJ\m!uZ;mMDFUgR&p(0\8qgg\%(drorOX;K73\YVat;6-d+PcShm&#J7`"Q"e/Fh)E"q248LrmhKm4qeTbj
%3P-tU(^,,gKe`$l!4$<EhJ)^:EqXn[p#^Ybj>.,WOiZN;?:JSl"0DZAioTnZL,n&2RgZ,aeAik$naLf-*U=NPk5!jYEigO?:@?he
%/UPHK:N1fJ7efL\%9tQm(`[FA6H<SRla$hDF4#o^GBZZOJH[t"PDQ#sYB"-^R,'i2O"p):\^W/n>$-qq)VK2iBl)9IKt8&rjYnZk
%.%e7L3e`E0`Da+M[WH_LX++95[jn;Pq%m7aI$ogu?[]M@?e!0,4_^Im:MIt`BDMC0mp""dg3D1H>HtAMBUH9[HJks>g=spop0O5T
%/J+gcgoa^?TZ$DDF:-2-2-Kde46M[5$MINP%goq6SU89+>T4TQhcqUKSi!&k&&:X2V@S"Fi9f^Pi9U*mI!tP$&=jgZ,Yqd]KB98U
%aq=oilL-nVjq>8(?qubk/Y>3&%Mnm6bEsRRepdCsoUseCo6)btc3QDj1"Vs]lLQ'Qe*LZus6\S?7WH'2$Jub,Hp0c%_@5lkkJD8I
%TM?9OB(s.8*Bj$k]67hSEN:YGp:UfRhbrmmUZ4+%kX)g4ikkM:YA7s(gfbf.1VdfU+0E9TEmcIdrF4??e#]KIi'X$(*f'Rj@k\>Y
%GUCG#EUaXj`Oks*l%@PMfmV7r>WT$!=(9'H^FYqlMKBoMX'ZVQ0u:7W\2Mo)_ZD(!%W_9\LJ;-gI=[DKcJ.W+YqcAs^$Xb67VC]9
%h;X@UT>)2[oe1M&MtY[*SUK2n8b-RaY+FuC8GaqW:g\Wi^n*\>*Hs_$QSon>8')`\haGpg_`hc"NTG3l#$fm9qVWBBg,qC<]e,g9
%&#t%LesBbH-:]>m=DFgHfq]@Vb\H,7j8/LJDL\Fh]%cI,PG(An^C1(7==s^m`CJIDZFb!kL798[[l9EQF@_Ug%UnfJQ;Cij3H$p)
%(BZ$h/B".$r=A>Df4QV1@P:7)elQ764BsM))S'/#W(.6kMm`4hA[<ZYUKH[saLf@H;5IWkP3DYjh7U'j>1p!Y(=-Ha;gj"7:Q\eB
%mre&k\arfbq7^gqk7*=%+JnZ?f69->53MCMj(>usfd1rq6N0r<-QbK)T"GFA@,!hi[e9X0op#Yl[#IP:?BpJ2Q;PK;`urcr9D;uo
%e[)/]'0QMMrSi/fmdIoZmiki8bLcWV("fgqQV)=.*k^f?#><&!G>=.@^b+'-o$-pX*%?`mglB!-Wq0Q]_2#?dn[/+;OTJ6E"5c`A
%k<05&+)U\VXY74$*u;Kl$Xf+7_p*5jmMBg1R<@Rp9@)3^a%L>O'*C]E*Gm\fl1'!O?OLN0V2(GdVdY>Rd?7_Ek4d..(:!3@5?Hb"
%Mlg&+$<Ec(Dg)$Q-_0R*?l8?u*cB5fStWlTr$Lp+hVQQoT.f&Bi^;>/pG^8C9,7)6SuT6qh$:Ida(WGo-N`A$h2SfqbIu\._*&"K
%ZiXS/athOgjI3W`e=Rk-ABj;g2V((,cF])',>nAdp=[Y1ei$QND]h"4/$KVdl[Wrk7,9CWf\1'4/$H7&*r&j\+m&=\R64Z%s2!L'
%Z^bA_DcD>crn6$abkE"3LR]07lCEtH2]!R$^DDn,b7.AFcCMfs!WGFa/iWs::UVt43[_$/HdXQl2"?I/bT<=0l=>eEiX.lmk8X@m
%"p_qQFi!\7BYMTdm.!h!fBs_=_s:9jr7'X2icp68(Kt/uiP`)c^;k]/;&OV:r>[XkfdK-Gr2+fj`rGW@Ol7AaIRM2Ns5K)ls6Q9R
%q8^-MaQta^e1oSC%XXi$lg8.n2)Ba[QR.Y.1/'F_(k>s`pZ@=+QTNY1P#jbQ"o+tK_<W>0%j9HDJ,VaQT3V6GU]66GY(\HSn5%W?
%:!`;b7TMR)0-0iGR)8SDHiUXq0O4B\diXV5RJ=VjD4pm?!4rf",k$3@?dI][2e`)V&Op@koC9/LWVd'0*l+/Gjl&i6XN[uSKueQo
%>,G'^AeojoGl(7Ah(mffi>=nh8,\B]O8!]VEcoCZqRGAV&_*iNQ\,IleQ(P/DU:ADL%#\XeUfID35Om[(gNs>kQ8J/rb"+"jC3N:
%Kk@q/[^gVJD`q[/IO^24ISQM"(]`E1<:Sh+=1nU;A*j2sW>YYtB.bbX$@<=`WkD0"\CX11HDCC$,)^5r@JihnXD<fi(XNu4PI3R2
%)YI'cB4B^JB[=tML>e,B*P;Q"-r:ERUBgOA"*^\hjl#SA[$-c0AWHh>)nR;0NPEH%Et?S!Us4A8%dMH8kJX+tjGc=p/8/!t@6:/D
%Ot`6`.#CYdad"d,9OU!aZk^^!XDd(ti.GZH_K&47$J-"qiHbui-'4T=D1.biScj$:s'WGDP0O_i7_"JFofS>Lcm[_Oj%u5;omFZO
%2CiRQ1/k(5%;_nji@,!9#?Z4A8CPRJgW9fP^sqRM;IC`j8AdAd#B&*OI-SM!ab*D[=IJhfJ:L,,b=^7VYS"GZoXl?RQ3T1240Z#f
%D:)l'Rn/+:[@gTZcnY`QPh68+Orcpshokit+K5TMAo5`PFslUF&po-uhm[P3_K3&diVJu:#].?p#'ZfrG>u2=2!%ge-7suj+7TR;
%$Qp!'R%0c,K"CHq,U*HbjW!&&X:`<+P8'1oT/EH%'=>\IC%5ZPl#$M$#g5iC&Tm,\Y+8fl_oG5jE92e)c$k79!#]4uoXngJ?/Z49
%$<U*&kG@WZ/`/ot$]pLl)UJaOhm7;RI&FGd_l=9D'LZuGdB]?5!8,h7"`.=,0&SZtB+lrej@7Ub86FIFd:8#ak?XK57<0Z,"BtV9
%:7at63+V?>8Y_JG@2hW@)\s/PR'u5]/8e6+59^IS7)Jun9@o<9JFOZE8)8LjL`IqpN_GW4+5Do2([BTRL6RElYgBBgU!;,INis?Q
%b:tdVZ@H?E@2p0pVLYiQ,N^miLSoYUI"G)/XD'_ml2c.cVB37<.?8JRr.pCcTc/@;MJ6[?08m$7U1RXkBepjcBI>!J5mPh\YYbIo
%3QuLb8hq_;@,R^s_@?QMa28bpUV[N"=[B6gK?IX_=nn:*?$OEo>Er$(J:Rl"f/5k"#SO4f(47)G$k-tL7`=s8mmIE4cK@4'A%kSe
%"su=DJ1F!(Ykk4`bk-RX)9U+76\`b=qR'le/?S<,c6\kdmB063=Eo;G(,fW3PK`]"c^ociCtgpL@ON?MCj8Ani(oh1OGS!Yq!Ls9
%oDWs4)5,"85Q?NL]!2Y8ht]E%!r!T;0;g1+?c'Z&FesUgZ<0*]+T*3g<BpeVLY31R%!\!U*J:-sZ(D&U8dl-qVGCFF!]S-Xh1c(&
%:$P$cXD@^CM.*I;Y/u80[Yh7FP_@'cOF+"`-/rAY0V,Cnn3#%Y*dkj`<MSTCSsfbqccmg9!t`er%4cE/#i>*eCTn<T$bQq;`^2_R
%L9'G:m?YeEcNDJd/HSDEEAZ'rV0a&TA:[lc$4B!XiWrXi&:$SSfu7g'KoD"c!Mh7hkV5``!qr(@U<E27,ktO;q*M<QP-B'pNHqP[
%#5\FOTeF<G/3ZcN/bK**6_Gda3I&!W%#jR#'>kD))c/.[gI6[d)f86U.0T^4K@-VG%*b`IBIjO(M[O:q^ttl>:&&Ck`&o0l%7Bul
%d;ghX-YW5C`kl>?(dd4a)?GC9%<82Pk[4Ulb=\#Q4k@m1DYl?77%h&/,)V$"P*r#eTN;DR"rXN8M!))kPqY8?HXA3,:u%5U$Po/2
%(<AF3WY'N=Bs>th)5J&Sg-(,rR]-oS!<<G3Ri4TfS#G0h:_/pde(fWdTfN06DqU(-/>b!FpY`QQV]%^#D7/_(?N^K@XqsX_8tD^g
%Y]26[C;GAke?fY==,X4a$0L5\qBCR%Y%BhYQ6+?fKWh8>C!j#4L`fN:ULe^c$H*%\f"75Br.p9UFr"k,.l1uVo_O*hEFI<G<<W5o
%`"_Je?Yqh/7ji)u60ZPG#UG^i8kur?8>VtK!AYTN"]#W^9qgoBgqhEI?r,4V=XMi@fE?9eKs0FU4OHWsBsNHqHO=QjKXFW9\k:<'
%P%58#(&#&1:iHD"9`S55(RAf+SWR?.nR_jQkaQI%-kQfQe,h3ILj5X<XrUUj9IgceYJh96L!)tsJOu?&a*Rm4?%`(`#:-'[WNjes
%21-1GJ2^CG/.pb*YlA*`]1SSce8W&RD5<=M<G^/20H(AYOqifD(_j!j*B9AC3#K_Ha&8W8Fb([+%7XP;liugm1p`LcQ3MB)8"p%G
%JRL5X/;!3@&S\'e7?6c462J_+ARs0E_6=kt.<6XaP6&Ob-AJ2r?\s7C/Mc3]L(2?CL\"n]gL?.TTVTVG_&9IoAT#>#_4OVH!:gDh
%D*DpK'e]jEA2DFqo+Y7BX>'>f^a]H^X-&JFBVLgA#9G3<iLj:`#n,K/'Y_d"?23t*J\ucc#7dtei["a'I'-`BeIS+*Mr^YK!FTei
%W8`ABJ_=Hc%N3n=.6p=^5m(\'J?H>.a&+>pG)^$-1_NGhT_&GK'52")_SQYIaBO[[&t:hX"I\C,CH8PMH^7^O_q5.81^@]/87j)o
%DhS<U*BM!*A.7b=7s@H8("o)OfL@C1VG.Fjh%jh1\0spCV+1s$Z>fs8Lp)"cg*7p`iXYh4jE_;%pQp'p?tqmYB!;jIF-r9^U!:i"
%*kE0W*N42rM25"H<tWiB'"7nd$iLHTU?^6glcu:lP6e9^#Nc;P#ON#jmQdg>P6ID8PRTOEQVR_aEWY.`B%o5+gdkqm2&3Z-'9*%Z
%!6nsoh?*eS3j?uWVDX$p(auJ?c;da"HCX$2^,(&lf`ioHONNM=.4IRM!eh5\kb*lG)=4%`7R7't4j-$Kjk@LZJiC%=U;F,D;_9E3
%#ROpJ?a9?68JEWaZAp2o;^4i)1,C#n0U"YI&BKlG';'j:o2sGN/m:BU]g,]WddmP;e5=G&TiXX'JEL_]9@ue`"7^LRe`S%aY2%;8
%GEV8pWHU.58b?_iEu;s9V6Qk*\et92L*^KL"&ml<L:'k)&I]L-+M3m<!2KBCYm4r56[3@$41MD[r+Jih>m`(d9#sr<G6N;r^^7de
%/9tA4.Pdc#CU3$?i.E/cN8bW5$+QO#A4rX1Hk#cN28Tjq@LE@sd2quN]iR+t"bq480RT,KBYGk6o$DKS#m1jq#0^aN[=]TE<4f-^
%*2<`Y,D&D&0sBRQ@P6R)1KR%eU!r0k1ZI%Nb8S+[?l45$h$CnYL>%2.Y&<uil+p[-)'j>LW%DmtbEUZ+pW,ZJjog6P.PV8GJ`+Ld
%Q#?4VN"j@W0RchF*64TL.m[jB>tmtI#*c"ecmZ:eGt>nii--:fNe=?p)c=jgE"4>]Qt4?C(pWQ^9juDrOsRk.@nZ<+871Y)V_&7:
%K3dmol/mSaXWC!Q:r*M"8s6#9*D;<'$S;ILWGf(e7eu>;8tTP-^p#XWR+O,N.[$Qo+WFi,$*FsKkT'_m7=#-@1BZ6+o=,%PiSfb#
%:6&6DU_d9?#t<2FK$>rFXjdX%X$tth1m2+acj#&SD5h=n(S)Xc#PgnK,Z7Ak%DYsJ],V!,"1Bef!#Xl7k],^0TV91o&d.A.)6D2K
%-[DHgYQQ!oP?4KTYIMKg@"GG3"hq;8_"7aA@1?<1AL7"sLBTd70*VZW0p65Ap2s1]Ou%W8a7=oC"G(QFZEfEOK,#ddYRkW=!3>le
%!'&n4E21;_/L7nRU4@rQd4(M<\0`7Ys"KtFU]jlTjI<r^p<[3aZ+rF'Xu!HDNaY)V=M[Mc=<13Nf9fA=<^n<?1==H0Pn$@o%$s%4
%*3Q`dN@)W=d0_!0=dZRGCk6309:cX/RXt\\Qjb=\l\BH/(tE91NbOs^;q:('SJ_s/=WKPEaEhACA`Et_N%gR?VA1WbL'h264,CVs
%NZLetiIUa1U\9qUA;W$#`'THLi92%LA8luedu&=@lVLsm]OJ+9fnBQI<NoR,nVhHSp+$SRGZt)T\uD@bAoJk+<Np%2*/G"j%dCja
%],VZ@:VOaB'oB6GE[0HF`2TL8T$+hU7Yd4?pFpn_/t@V65q'_X)6UkU^ncR;F"q(DOUf_HL92CX;oP8ShpMR5)EL-;_$?%%00Jm6
%aoB5VQD\m?)IjJ0(p]aWF;/?+Ul7[b!+L^I!#'^DPVEU$F&6e+8H\er6a7KhP^Q7q$tI24JE%uA()7ZiY>`%>Fq7//j8k=c:E-EV
%`Y#\]M^o3q(qQMf'Q.%]"*]QsN=dBFHe[KS)&V5M!$#_g@P'LhYmo.tXPe)@6$9.:$qu(G#O(ScDT,'LiTq!:?m%(B)__tq"l(Mk
%5D7`'/6u%/RiE[T5lk_YA-O@^$oEBo,lf)]6$aACAks@(Jh-I%>Ydl</]76]UMWS`1Ct&nl8JJXi$k^K*$?[Y15lp4R!bSi0W>/=
%:HiK'$H*=1U-#f?iCfH@5srn_>e`Y'*i==(h^X*Vp7Z7>PW;*(:%CJid,QmVA:X-Q*lh(_-]Ls\)QF$-a/'%h(ojH@pIdG7_'$o9
%$"3Ca4VbO0OUcu'r#8G\dIJ`)`ENgg;:]gDDIZ_%-k-g0N_amJ43%%9/.lumONh(t"LjnX$4#+L72qoGjiVInNFk1#46`C^GKG!9
%*Aib@#A<"m+I,XFPaQSDbTF)(`(!u8BVb.3Lc9)#'f8c#(c<::)62*R-jjeL1/\Mfj9Est#pgG42&OiZn0",F54Z+!"F_)Un+.OF
%<fNEEiXara_qp>u0JS&EMsk[IeOHF0/`:)7_U<:cetTeoYV=-J;mdR7G(N30@_I[H^FN9YCDr-_>*&SDDI_p6$5@;X.MVqa2`sSf
%K)64T@$mr+P`^hQ+hkUoTGb-Ie&?L\S4q?>5X=<":4Y;71"q7K3Q*4Y%Yc-kFY#O4Lr;2'EcdBLP[JOY5F!_r!1"6OA@)OF$QP$"
%6k^+OM@<-9C$UV-,@s@X:InP#$^?^;+XuQ`6FS+92MTF\`@T@_<+Zct4itPB"p7/#1U'cF3%H[k"?/qp1_m//VcRjhb@8'eRiMn=
%iiERIl4+f`4,ecbgS@RU'=ODc5ghWDg_Q]D9r]&`fKjG#fM5>T;&)m7PuVF)OM)](gb%&-3Fms6Y[m(C65`)"$kP"N@.o1Af]js`
%%9Arid9j9GI"=TeA1*,cF<_o%l!W`4nN>?8@02<H*8'(D*Ll9Og'eC1f2[eWjU\U.G`3RFL[_h[5]U=dgVGahR%4CB5h(G,odKq_
%A4JMgQkEq<MP2\%:CUf\$-JpKl1ukZc+-&d?Kqe!W[E]^&iA>Eq8pI["\74LOkiW\hCido"E[UTbJ@kGjlgm'b\&8X017W!^mm?M
%@7O?TbXaH+k'<?;U"uL9&b2ph]6_jF@<!OTA$CrW;aE.+Bj/)RdPepe3O[FsTMuqcKIo#.(mlcu,iT)^!5WJ8PD3?h!d;YJ+2Wto
%:MgW.NH62M^`7n8k5f4BL+cN<KkX7:q(25jCe>.uK897,Tfa/#Jg_-AX.-m@e]"iB(<!1SXh`=@9Gb<O2IOLYE--@X(kXI4)73V.
%a^0gTM("jEL$+r*OjYH'BUI#X=S)VM;k/`*TsF&?#@t>LG%K@N^&i(Ad&9;_/C06#PtklNR][hFRdcWsoc0/`.SurHOjR0-[4o+"
%7A9qYZ_Q4XE@'=_*`orbYYRDA54Q*s6T*/:k#3.KC3QJK?ra?N(C(o\NuLf_f`>.e+fP^'iCi;^D"gL@8sK>!esHo@lj9,4[ZtN9
%*&*B9M'T0X),K';(diIY-ne#$$`A@d)e8R]pUX*6RLU-HlZR;rI+-NZL2sRR:V^YufU4LWWEleL\!;eDGoSHdYUT)f<28KY,/csA
%Mt/T2Auer@/0[;don_WS)_n,/M;5%,B,[VG,Y&iA;RP:nqa29M6T\5OFrTa4/<NMGCK%r@,j1g>fkd=GOdQ>q0au@^/_4SX(ISX>
%H+_t3h2Aa_PL:WQ[2H93;)/tENbUZel]l;JGl(Sr,3%u()$3Ic=,j@WEFcG;fXJ`o*NY8P/!"#8/VEFmfL)Vrcf?rQB@J_"e];VB
%k1;m\Wt*M$nPune2?CFTMNk>@4j#^XZ/dF0USfbIl#@\93H?a<$[Km'k0+Mt>%FZZLnG[03Z.$0h"ngR3:q>(_Qurp#ZP@92B'1!
%%APkB@"S]b(G#X]5`V:JN?lNg8Xqf>K)Kp=EsYm8H"$aj-Di?d4rrXB+Q3d+FU$P_9[G0!oe?D+3!\!T4ePY[aWrR7-@O^&AT>!t
%263hu*MMYH[_'Z4TM=N,5"Af[(E:D>C^<BX?H"1C19/H_F]]VDjPmJ*e*WB8&AI8,7T5Hg^bCf5Bh22i;9TmLV5)cka,Ij=j&/.3
%nd:D7,BFkJ[K26`VuoDk5bbJ<B/ZDajXuXaA>pVTQ=md'G5sh5G8\sPeq"bL7C=e&.(R2156fUl>Y:7NUL)n(#0p^X<,HHFU!mT^
%^`o*Njq8XBD&5r"gSQ%62O2VWTUb%O6u4e6W^fEDL+>$`dGU0,/<mB53D^qj9<fDV(J/"u.KoB_^`*u37X@'=:'E8#P*$AC/-M6-
%TSod)0sGEN1mk:?a[BB+caTYjCkJPgEe$G1<+n*^gPZo(b9qg">Ts`!;aJC:V;pk_>`9%&C8T>V'UnV'A]3VN:lT&JML^PSBIE?P
%D`bO7Rhudi_N1qj9bk49KlbmLV@#p(=Q0rd-2[NXjmo:sWW<bu.[28bY&^SDG$oJPh@>N!+K)G\Xu3IaUT<,XhpYRdfZ_>e<i:4J
%;^?KW)`E<H,?,hBW<"S$l9Jt3(8,7h.`LFRT#6OiV=.?Z.JfNK#-*g';cMY9KZ/O%j^m\m"rgjl:?i=`FtDg"<2lkb'f1^]o8:jZ
%2,XZ=>nnWDJ-dm4:N.dOTiFW769/3h7Do*KN,20?@mR^>BP<h@$\X,1BO;(6ZqP:<23>njd;^1jK42R7;Dm1B.LeXYe`BsFC8\!?
%m7>Q]9I@thOqI'6NefW[Po4F[d8Ub2i14FV-J08RF/4s%a_!hMn*rRnoJ<V#$0]C7ZGOFL[$&4\QQPl#<ejL>Ya)QWTf2V0),A"$
%*A9:sgL/`=7Xnl\AB#E0DPgl)a:EIpfZ*QG[XQn'*GCDUe9H=NVT-78YO<$7\6KV)l8*!d,RXe"gjq"QFsNMQCaS29"%d2sN!`1C
%YpS`@;`0/R8pkB"R)2f()5Deb'<jOGZ'<?9G$#G=&?9[YC`B60Ye6b&QEUH#'h^p.ok=UISJ%eX_(:@N(MM:/b-LV9luM/PP0G5G
%\=q)g]b3]?*(WD_PD]3QM[Lt1RMpUH:g0)5?nmZ*"d;:L-j#VC_eN(M9B\[GDl%eg[:Ea//WGK`-ZL<Fm';nN_'/mOf1Dl"C+)2e
%V!U\]l:PV!TfM:4g(H7_4-4Oi6`:>%T.9@k:59sVJtV2*e<W9F8`-J,!C,^#_1_qqT#1#:g_/$]4`$dbYJMLR'uC"gZQBG36lL%Q
%HT.<Posm7-j*3+@0_Pt1>4mF#Op)V)!:3c00UKH,GUUbtplqeP?D_a#9.5@OBkUGE%g-=:Y/Rq+_c!l`2We>Fp`%+5^1q_rog<QX
%fM]+MO(9p7Y/LS^!d"54nkP%<$@YJ_&Ol[SQoN-f[&"-60f,\a"Y`qI5nl0%\FpLR>s=ZaB<b8X_e#O5XaM(#G<O6+fHt51aFqA`
%/6<24.T"*KpUFVLVK.VZOY'<YddEf\<?%-PSpDGG,h3$*G)3Jn2MU^+>q+uGnV3K_E+gV/V1Hgh=W?DRSuV\^V4+DL9eE+9G_;1k
%fIk8r^d_]K=*<i_(iht':<!'L?7&]UB_0SpKgs<Cko9lJ/'$QT"E\E214Cq(l>l\$`h\7p,D+^'3H0^T[o9'+*;<@+.?][\L:+Q7
%4:+]X@?r+?-Nk08pG9O.-mCFRYrH"_@,o'baooWI#Xo^EF#GTRIU_UD)a26km#H,u&^a9V*L8Br73'N;$[#PQ'=V^-?]0&K!tEc]
%/@T=&jH<@APBoY4_C6gigj<l=3LCrM$6gG8/.k+AbiG!1N+GQ#k;JqQ<LbNu:c`f3EZH=p\a'km;mql?!&3>!Ar"<,];Nq/U;f&2
%Q.2]7Y-$D0gXAS.lHl;#WG[TRGo1poMX`5kBPG66ee='g&$&]0*B^Kbb:t-@K]%/(TWRCUOuRL"3IG;`5lr54B'lFgkMU@E$WnIQ
%_5i2Y\1eDcUM9"`(KT7o([gr,qZ(.%Jtao#X)7&Y4KVa_O*cW+L#Fr@I[WA"?Z:]`#2;j5e`5ZG@",!.Ju*eo$_#m8"SQ,AQnYs%
%FD6s+:rS-H.7UK*_i0>L]fp+RfI]T%4K<19D-TuPAgH$%M1mZ;Xc=(RJQ,^/42YX)R4?GrWI,J(DKM,&"KST(+sbli>h01eicBd?
%9QrLtNB%-Aj<5%;To$hY*F7;`HJVWI$^XI>J@d*TPAi42io$K95oVM!nd-TgR:1l$2<64SEZMTD0LogBm7bJ5<''&$N#3Tj11J'X
%drcDG_9=3D7a#eY'UD_)+DG&#d0j]9>F4L4M&bJE;mT3+oaN]T7FEI4Z7,kDBU'g5IW:4b7k0>Wm/:%.gf$#7,X2YIC,r;;&G:RW
%'E0Br\S)!k/GMc77C=mS,R>mf,]W-Q>3k+?:=THh!A,'e.`S2rG=43I/-?QeESo5Ka7H&#K86F$9a9Pp.XGJo7rL*-dYBK?hSite
%=saQW#dlLEqb/_DLT2g12m,mK-cYIPr=TlU`/el*P"VflWYhHO$l%O/dJ%bT_2oQ=e+9r8a7DujAgUqbYg;O*jMjpRBJm!=>LJWF
%WC+GI%]5+Qc?*<\%0^_M4LHD-XOnhg`%VlY@,.hj\L24EaHSG+*5KiV'bN.E:E_VWn&pk,4*:t2C2D;r<5_)9Lk-$X$ep'RN0`OW
%&pQN*Z&F7M$:f5hR<VpL#Ge6?--UTpeeS&&N%h6X(X&t8YDjs3lcBRA_K6XD`tTuG@19]Vl:_d-j0#H;V<:IB[:AM8H\[Nd_)`A>
%CJ5H\l?jRK_c&G#Ql,B/ffW9hK#P'ZC..r___s&!/.@o%f^=pPO-tg&0sU!e@3]5P:&Fm/)\I(ofTbjZLfeCd`>ES6&^T*"W?FPB
%^-"@4CS0rRZ4^GK4U4#;-ETZs.kt]^,&obM->c/0opHe$m+[>`GXpA0cpjf2+=Yg-N<nA:FNPqJ,>(#6,qmr-\f<D4,@XXhX-o?7
%ki.^F`I;eG;7@oh`'gB/&U!-,N>MccgP?].GKAp(fn`bL+(b@[2BlVnOJNo&&M\V#)g9Y!U]O/*=N#$o51*gtU;S`,Kl^`^+pRIP
%D<]'!6qY(Q4VomeZ.@U:S:m"q20Z3Oa[h'pcr`jVM,]As-#H%4E+%nm@l>P%\Y)9MR#Qo1C>MiC)\L7L_,e6[,@YXU>6fQi&W[XZ
%4GCM+M#:rN'!%CVLfD=Z6,H$cdgN=L1_F^1?i.8aAps=B8;g9giV?/"d)MdlK.S(=Z.c.$VFb\4%kSkedt<@&^,o/=%TITTBm^HW
%WgKKb(-j@#N+`1cQnL?:<*=`s.??i<fW1f?I8#NEL8o^A.Wau`qh@is;,o.r@3<E&(E$Ce>ERltA\u0!F%o/M?$JD9kZ'<Qd`ZkJ
%6PBZpC$sDN_`MtC=$;O7.:+\r95nKFi8\($mc"sE/iUWWZW3c1l`pX(Dj+R]R/DHN'ap6?"YJgHH\-23=JiuT[a53s>4f7Lg2oof
%\h;%p'N%#e6HH$'U5nMSq]U0tej@fj=c-LdW1_dekTELT7]&OcQ8`J%PK"d=hm\_f7I3;Z))[46ee,BROb8<;P"%4XLff:11:!0/
%A/D_<*P,On8m9@8\6@*K7M[[WAOkNJ7`"M6TlT$_Q;m6e-EUfM@6U72NiZb_>KTZDa]N3$*aHo]`q51%a%lC[.iIm<@hCFG=^i+!
%=[k+rRC'+d,%`,o11K(8Q&Ort&goCY=lOi8qG]l,8B,s^Wa^i)aX@dMD)lAV)&llKZhBAh&td*#0d@QI%%lR@)9GDQ;[8Ip7PZ;%
%"Y8'9OY!cSQLAb=7P_tB4Y;n.7^Bsg)%eE3,U84o`1et2);3]m.)_'T1^GYHkFc`=A'.nE2dmu,rFHlFP9JXN-GcmHOdLR%:3KdW
%84NE9ogj^)ZGatD[Zn.]N*P^HnhF`%4':.qoZ]P>=$d3SF4hbWjjWeP[5c=p@,7OqacNOB)k48161W`GDlW(J-DO-N(E3ge^T6lU
%(L,"+V1VrZ4RBlJ@6>7A]S)tnhmGF>M5S)<>U*b%_;dG>UC[!I@j9E*:PXpJ4:pir%\HGe9icl`KU;Np*OM:W)]r0sMih[d`(C>r
%.T/tm-1nGPK!4+;*/p!4\d-?4^,=;X94=UaW]><OjT:EQgO'9lNYJEQ&I0h3>T&AAEh<pOht+71FTidH)e/]2LYYFpO8/Zt(Xgr<
%FiN)p]]'3t,5E\ubVO:q\8L1q[c?UJ"4(ZI,l8J0*q*`b]B8I'c%#ERRUDNCJYlD5CLTFV*bG+`QYV2]TGuk<>cro"T8\AlR_(G2
%,>m@13W^J/4H^4*UV-?//L4UFe@As[!Fp88a!Xb*1^\>@"-e[5OVH#m3dcf+/6n+9L;=o^/iC\m.r<^,>bbl($_d#8E2Z#:bH;7+
%il";&D380Mk$5O`e0S;-*gliV\N]'m2ia'WW6>h1i+!n2$E3Zd7=P89To#IO7l>n\;5%K6=UF2_c"`kDfC5`2jBOF.2!W?fe>/[!
%cq)Q0d1:cnFu5=$:DIW5HqP8jATc`@SIS^;E.FGG)Lc4alNu#P*4dm,h-SALUW"?)Y3re6=V8d^YT79jj)#a4'cBB9`LMIE!J_uJ
%Z"4XkK1,UW:sio,bk#\S5JTEQ-&tqAkjfStTh5[%<0'\gd(YdV",t^-U';8a?1A&%;nu>'C@l@M)4EbD4P2&&>o.)3i>F#r6YtT<
%NNU"="Y2:&WNB&LL/H',]UTXnk/kdZW[7bmeBeL;G+;g>qtp1;4G2a7KhOl=FAQ6,knC\C9-FSFpg&n+@1V;3B_*:i<DR8`"\2)@
%0p>DJ`o_dp@7M=R^c\m9dg#8-<7Rjj4UsMSeECm\+"jF!;h>^YUFO@H`E`n)/h>t!m:.<G_pLNgA_t6rXnXqV$rHQ;3pa]0#JVu,
%A?^(AdIhs?a^F`5?Z[buW4TYG2eH2uFG'>r[-gW#e<+Q2TGO!k\G89Eq!^r#lkoLD38_5ge:D?>.tdV%VTmeCI@scT;=U79:_&rN
%WY3:DEah+O\P,<]bAlMf%=Ch*@.=?0YTjK$:t0KA0GRSIl6aBkjVO\,2%9+!\MP;P0H&$Xo(^!CSKRK&$&R_YZY5i<^5?sK1W"++
%Ap1KL8if.[KT/le@J`_'Gk(>3/h)Bq$A%4,:_@P"<A&cH%9*f;UB]--6?L&,)_I,M*>(ZX-S/tH4ecLt^G-m&A*kgi*>[e/ns3EB
%;^4;Meg4abjbeGO&_eU5&_O&7Ga%oIGaYj-GZC%BV!.>O^7qci:-WMiB]i%LY\[ZcU^B2f=b*<u-dFDo1=5gRkS*&W-M.V9:phPJ
%d<D=;%_chf/?,\q9Ko??@&]'`,)-Ta1hQ"V(-Db_Fe!ml:Kj0[N)8(1'(O0u=-sk-#2lL5N33p<V8HntiiYamM[&PjXq/Fm/A;ul
%M+9?7O-2<mEUi7f;'ZCbUYm(jL58>mE9*&-s'4P7U;VnH(Y_j_"0W7JNc(XCTNT?Gp<;"1FAX,[Sb4X8O=jfojC<00a+`MOT]h*U
%`a:Q0\r'004k%F[&%:6TAMW3"ad*]=6JYos,5FdXM/2B/Y=)fdf5>!A%.+Hcm6ISW%#W'!#EJqTX0c=>>]/n#"6;,H_M./eUK(Gu
%mB.q*`q5^nFqbuD-db94T@g0k@$Q[NE7'e-#B'umoO1)N;\Hu&U6CWb=sdbq@(o(%n->fXl\eSUaY@!PkG*rXl&JE5+Da+3U%11'
%.f71gSc@U(\+OEX*(R^^n:0X<!F>jqeG\t%Bk\@fB!D`r98J)uJ_Qp,!n<B!$/FXWhhoLr3p4+KcO=G7NX\2!Uf42W4/]5aR?8)Q
%cU*Fd"ap)N!<E242eY"u@8q[^+^j"8Mi$.f13.fCk6>Ukqg/O<Ut>?E.6isk,#@\4Cs-.Kdu1+)fJX5Zc#=*O3d$U&qU*BiJ;Ghr
%Bc3:R2Y;AC\tpl]k,%YDjWXOI:n74l$+M+[0;IW3/R!u-9/Z#m.DQ_<i06.)3DqUN4t@Utd>PgI8'rtZdP):70Z]68Xi6:=Lr2g8
%!$6e@m5/+F"nW"Y"TUq<RZ>JSAK?tK>"'.6Tq-)>EY`sc`%S4WN$q&o^W*<%,<H(ljD_7R&mF`AQ4,kd:7#e'r*Um;&2]8IjEd*$
%^U.<+Em7$PSn7JN1i23'EAIg=<lb&dE:)3)i\NbU!<"8fM9gNGHA,ofRN4'h(qlXu!#[["[.a&UYl$Y,PZ]4XF$c_i)o]V5aL`G@
%"`##:Ia$+AEJ?o41!uKEDK&>l(roFkMHV3/d,OQ3J<'9]Lmbc(AU&u-hGHekm5mI8<+h@*KC7mJY4$%j2L)jrZE6%:G4)D/m(Bpc
%)!hipP&2?jKL&?+G?VgM:)gF]KjG^K-_cZXi05g[W=KihjtHraa&78'?"^Ea162$q[P;J@]H5;;j&#-_a:Ce#7B"P<f-FFY#i]=R
%5t:;'aPu/0h8Q716LH^l]sK[.b'@^_]XQR^N?5D=#:U@nEOc&P?1$r56jg;B!mYZ1FB%Z5Sl+f@do=!]9!SnYMJSuO8\*5$,%+"r
%mIF]OiZY)fM&!:Jkfn9U=WV^r%TX=9=`#FATs,JA)r.rIr1nc=`+Yc.J%M[n1RcqrN5<#Q=Yjg_jMYMRpF-aW3STZLXJ1ZTZg@P!
%@(=*9_s8P.\kGK3Pen]D#K*gKWjoJ;p8ZnL0Ld`s?#oZB?*<-.8IUiE>ga>D!/\aaOULqH]D!*sIHh(dl:Jd[Mq(u;5?)3cK9UR>
%D3@M.iS0[/c]GHYO>/ZKl/oLd3gdjJFaK"bHUjY>(Z.G!Dba1`OLmJq*JVEUg<Xi2d<:maT&hm9^O$IbS:nN2"C2PAka5,S8CDHe
%W.R7\;rn*2$/$Ja47hL`alA+SD"/jV$74(Q0O#GaA.2-Hr?2r^fS'`Y-Ql!pe"Y>.A.VWRG@uM]H9fkB'5pHd#kf6JP`.gM-Z0M3
%8m#;EPAU8KaS6;Z;d(Q*D>t[#+$%hI"(P:]@/nPBGCni;@d"^MoXOn,oE,BoOq1ma-IAYf@AZ%ZDs)#9Xfm!J^QIaVLYq_8J$\Rl
%l_"0GFn>W-Y@[ZZrHGC;%rLiF4g=p\L%TB^ZQ?-_rX]UBAQ/R94E&H:FlZ=f8W''hP3^$cIJnL\:E]c>[PS\mTVs0hbkAaT=pq>"
%?U*T0\b?!P>NK^_YGL)PWa$WP5CGfWYMZC#FsBN]?H^Z?Gl@L+1t7ALPP4u,Q"rl]RDG^WVm*i<:j?C.`,p[t%D"9:PfR^E8u<bI
%o844,O*I6;cgNqYd_%e-*]4h3(BHX1eZGTN+rRiBeuam0&Y<nYY+3nTqnr"ELSbU_;0X9@G)K3cKI3GN-EQDC&k"H4GMj[`*kIZ6
%C*bWD(,hUh)51EQ8k5#IUF*iDOf68YW>eZ=[Q2eAXM9O;h><auO\i:.Y=i8)#OqUn7s5\34ZN6]iF/C))C?n@8TW9+P1m\We425u
%];9\Q`\rs+G'2#1lA[][Om-L$oUGXt\sXhLLojD3998.;'lr;B6ducqgk[aW`t)_I<sm+[/']CR]^Z<([)E-O;&YW6C?1+<qkJ6g
%h";\bp&Y&t^gPh(AIoU?IAm'^=tCM:4p=7_O4l$W`/8Rre(>@#8n%Q-ZPq5Vd7>,J1_CZB%[<,c6tp&09d4<<a^cbgYn6K^TmQ]W
%[_u6up"H>f_km]A<bE796&:28rK[@6CF0XbbrT)l93rtjG"t_3.+*SC&mUn3m1nJWEKCgI!HNE0gP,6W&-6t%[&t$LGH;=-"J2[Y
%S%jA/&FE'Y]B07o"HZi(HU$^q?bbd-$;b7g8sEOOn%%,7iF94jcHZ%ak\s%Lp>rRC=\QuA;Fj3;8W<2SJ%^=(s.P"!IsCmhJ,XBD
%If6lCI.O8Nrp.>tq:fQZhi9fL`H-M:^"`3/s74e1s7jiWO-dH'/]NQQs3;s$qV+]`gB/AmhV@Mp=<J"pCJh*:=D[F&B8YJ`i&fu6
%8N1%g@G'Or.8li,,'@g3G/mUK:$$s2B!`HoB![ZhSOOQNgM=5R%Tq$EJ3MK;K]I<WT4B+3`55@LS<PE/`]&VGb1Z+=#kTo%'\*+9
%e&n6.']R1LRUj)!KVt/7d^Zg2FYS73S2@pFBH^d]`*-_mN`1$(]*+^\PZ5@:m?Wd9AC>uu7Pn*Z'S&&RK8r@g=dR!f-J0$XNc?A=
%T@9_o"tLFmc6#P^JasQ>k>>B8J@(Lp<8crnUc/ne'i%IF0ojBZJ>Z*\'*DX$:H8:^7*!t9]?3pQ]A^`#cJ\:rIVShNH>RBZVKj^%
%k?LKJfqM1I'\Sam)@oUmmJof(XIXVs?/7HN#gCAKEqFK)p+Y<]VIjHHaoStZJslf'^X3F3<Ej7Q9"3_'BZmHY9W#e2rYJfgdDaX6
%h`NONMD6P#$PjmT@Z=,J?_&,_gS1''A.#QT50`;Rn>Ps"+<+eX%%9"=:IpEj;m6<C+FC4GVL19"-"tq5`De%m1?u1s.=>bF?CWRV
%)2u*Aaa5[6K@.Kp*!Yuq)\kjF,!I-',p;2!5D\cll]'u-"c1P*2HW4tqH*b5*M`_&mEb!4c7E$(a;`;YX2GaF$D;sn2DMOMb*)r*
%]2jA_jU/5q_N<5?6>Z>PcF,N7\f6HF]&P-6:gc#);4YdN-bS*dOj]Ac]t:c2NGcB/E;f'_J,I4!rrl6!5CE&UJ,T5u^Rek=Dgh1X
%J,8!s\Tksum`4`?"YV!]qq5b8,V#68_.3@>s4e!l=bLZ8_Me0fiY(KV9TnYsK4h8g2t"J.O'SF;k(K6I?n$$ol!Jo?ISG=gajFlt
%4Bo[5m0HjjAQW?="+!d9d3=PBLtr<-K+\A:bn(2IMFiQ%.@]04bUU0'>ZQCo+<seW\cZoqcKT/7g#*TZ^q4SeoN>.i2L>%D8&>Gf
%Bj\''[3de5h?&J36HbLVJ\tf&=r8/*/oWkC.d0>N:KgK@MqO@Wn%=A]66K>Q/X8;S)!"7Ic^LRU/(XBtkgu=i1RT4)eUa0*&TV=R
%!aD0(p,Pj(!=*O_'no3;-TG)9<R7d:cQM@%(]\5K9oRe)hUJ-VS@R+Cl\`X@X,?d.W#jgXA2-<a"FB[KC7Uss*4qS!75k"@]4J(o
%a")loV6a4.;kk]+U0lcJF`2`1GT20U^`P]^A<4nO.^aMo>W_V;h8;gBd/-NJTV8dQ$7M<Sn^UZ[BgZMX/VaOs`u0\s=RWWZ05tXk
%gMd)f<C]M4&eMK(i;eh=[=jIn&,Y>;n,(#(RS"bH5QMgA$5XN"O4!7'1S(+%Ms4a`*X;o;l:;UW%=uWOe/J`1,E7qA&N_[(Lf\cW
%g%$8'V38!sGIGr/UQKbV+2#RiUBjm5nb#1D+Z<2c`8^YdE)o*f!S+D"YZJGk5`J2V$:n8'AthQ;&="\7nSfutLJ[9U8*45'9a2A]
%%oAYbhB)1Fib_)%c0cF?!#5n)B.^h@",=9SiK(3ASR"UgS=[kO)MF/OiSnNU$K$K`8V&^!;"LCgA]53>F[^X[<!^.7c/E@=hDJXB
%[=uHVG't3cV,;7A.msF@)*3i!>K6u-]m:+7FQ^QVGFBcj&a?jsimZ)hM8LB&BTb^OLpupt!Q#).,>.rA0dU7m/P1\A?dHSW,K?,c
%1'A@P9/X6/iSdA$!_qkar/=\/KV]9OI]3#-7WKMsV2*#-N$)--*-aeR`t2Y"!@&Q]SPIC.XL8^3Ud4p>gGf,s`Oc0YPKK?cmsA.2
%?Z3]S!rTX<VsqDpbp.Isf7?%F%gM<ii?CnU1b>ahaDP!4;McPN>umX;;]VK]`0GGH"3RQt?WIK)Y[/M;htqmQ(l0.1CA3)2af`\G
%N>`[(HI"l62Rp4)3&8C7/B%*6Jn>LNY)@X/kTE;/^]OTnL>'??P4.6>*#K5:HZ*KC+(G^DJN>hQcF@DQAdI)_'gTSI>qLHVXZDZ:
%SbLH]pf8#b"T/?kR".XS.g'!O$7l/`3#"^&#!PA\JQgi)3_ZS@]`U>cO]HKZ%VrG5+dW%sp4m$d&r]Rfro24II/e4ua#]]2H10^u
%gtrD:nJsn/P;l)3U3cH>P";3fYC<ARV+0#uNE#J13CWf,O\-\ol9+8^[$J&u)NbjXE[q?gB7e!<..A]3ClK3,Sc,*74^nhRI?l2u
%[pVfbBK6ri$]`:Hh,o7VZm/[NChEiq/Rpk^3i7cTOZ^-sh)d:Hi*QLC^TKpGZ@7g]Ig,<b>M0!e#clI\+[qf7og8ON7Xka[C*Q%@
%![:l#1?qUJ&m9tXj[?Y[?o`e!7Uh`.G[5?b`"J$69rBh9Y+3DpPdXBVfn*1=A(j<dPO(GWKC":ie[3l!oF5Z;8?%spehT/4k:gBQ
%7,_29.W;U,,.O`Y'^ZZc[mHc0a=4[F'+1_&Q-CFHVKum">f!t[&T,d!5<kV,CnigQ/-[N&2Ru\<)M40(&0g?:&B/DhD'i_oWO2!Q
%i(ubD2EJCKefTK\0(XadAM;>Z1'.FXpp-VtDV.K'"GF3<@%r5-qsK-eKCcdXCG,W.f7^_p-?]a"X[X[G+[_NC68VjoZe')+63u"@
%-\jE^lF3]mRY7nN#:RV1.<a/OG.24*U]EN7RQuh4DIdY#!S%>EW"ok:IkL\f`Lk#CK69oAlHgP:E#3f!^mfNiTE`Utog!:ES'WBW
%L$R$YqU+dT..g$@'3ZaK:g(+LZ0:X7l1>=^'R1i^=W/@jWfTM-V-.YC.(6d]^pn3jT"Y8=*<O+DL5Da_YfY/I&jB.Ng:U#mATpM/
%NZ[o"YM](e.jEbcEsX"3r*ILi=!duLs0atMGO?>2q?BA8S@k*Yj1Nt(i``b>I98DtpZ!lWme5*<6j)G$%U_E^fnl_+Bm<G_amQ?k
%BR6`ggZ.=6iGto^MIYho4"ae0\8]toE8c+*.C7fm5oMWX:JM+NE4P@t^poeAC>Y^DHsirG\NX@UaBY5G/e[7&+QQ[WZU#og/d'@_
%70rB=[7SOM9K1eu]VIJ;_uVbsgc-mY,eS,Q=gXM8K$d^i4()jA=]AHM<R$:r%R+'JFRF4%rgR6SRSCr4H[]RjqO=]\0u&"O-^F-6
%8p(GCr_+a5^4]CW3S05-6;?H>,P@OP3uM6An!?4p)LSh\Ks$^\i"Mugc4Ii=qr`o(oHqSCG6>MeGMkulU9EjJ9Vi>7Z7kn?FGcr+
%g6?umBY\JKo^-t^++m,P?FAL-1m(F?E<nPKE5`?QOFc1!X20962P"#e<9T$dgM1#7jbRS5#Utmsgf?/k*11O0_Hb]%H$U)92S40g
%?sl`9"#e%2\EN<4#f"s3V3tF@YQ;<`$C2q!pdC+5I&'q>mLZ%M(fcMVLV4@5$0O4Ho*#E8WSus6>6YVh12UL9&K^gJM\-k4ID(sc
%0S@<97mJ-#hIk.W#o3STHZ4:?2n.4[HpTd>Z(jDt`j-!MTo#3)<_qR%:UMEZWSZp[DHY)IRq8[/+SMBE`=N;W\9>M?/oKl"GX%TL
%7[8"H18;j4[KCG)r$r>[SmiX3Jq_e#V1%)-hEfq2b]O"9ZZm!4q]*G7SMLfY&*M4\)M#sCPfWeJM1ZBGN9oZjS_&iPqi!)S`BD70
%"Z'O0NH;!2_TT=hYfC@#Vn6KKR'[1]M0UhEN/0"fYloGY8!Yb<?lTEI,_cD]po.nil)DOej[7gHKD,pHdXr^Erd=E&X#kj.[OHWk
%Cm,n0`+W`BSPYQJpFTl*kJ?2d_VGJqYI)hRh,^V?'1-#7+=3>^cJ:QlkW;&T^n\55MtOo*+bOJHXCkaTpjh:JA=+D%;,-gehqJ%f
%1'mQ_l%%MtN8*XPO4@B&!a`/I5UN09dXjX(<:da&.@N_ERa]I0Rai;iA*p_OSE:7I`[qu`#K=)cE$-ukH.E/R8p!=!P,Drr-8jU4
%ILQN`l#sP-;C+h"C_jdA-^$d::?<Bm'b?nhCWWaR_*DpNbZO9a-mI)0>,&O4fM*DT^Qnj)`84Im:g5,HkWi:u^0;FG`RR@Y(Op\>
%OTk&0`o5@qB02t%$bZ!EI5pO`N/[(QD/n:anq*,@<@Pld)9DnOY=ODg&ne8N6)_MZ_3q$kk$<UE)9!Hj$??0V/IW])[BB*CS0>n,
%#-J#BH"&3=]/NGh_Lf.WQT[_K.L_O6UrI*6dM3#Z3(RCj$@773FE@[.?o=cD(-(l0G5Xp0:,a*%,9*ReBS]Uc*e#\E,RV*+`&eEe
%7>MKl;&8r'*\Oj;4(g%&0mQJ@_-jKYUL$O)>"_L,H\i>F,=*4bqh%RVQ#%[C?oTXdBK>APFSlnRq$S((>ki<@<<T4o*q#oFLQ$4;
%T'T4ma377sq]pALL,^#!1ZX6.qu#;sJ(e'W+-rn.PWs0C#r=^!3m&d0`PNXdb/_l($n@dd]&UsJhI<n*Ao_=oJe8<9-%Y-35LqDu
%!+Xr,ZJ6t?L&N>$0A-CZpbcA9!/0k@0j[:6;h2V)1A7B`GGrGl8IG`;C&.NO0t)<7)#Z'Qk)1!9$Z=Bm$WI`0I4iB,^M!Y9!Z/44
%f5-i!7.L2D'BiT\h*Dal/J6VVNBL,:cH0?J97jh[H=h1ih@A65.OAFpI?7DU68UJ3B8c@]1LR^KI%C@@WGA6^C]^_>F?-`p2/o&`
%Obf,$.S5mJJka6C19_7Fn0X_(iL8CJDBD7ee:K43B!J&D3^.5G=+jVT.W@+rdaScBV-'n_?o>ar1*QgK!Ks_mf'/shD7BiSRoRrT
%C:_?$e5[o,3K/d`\0)dDQcAYimt,:rdmB6bk'D_9.3+CT<08]rXbrbUQpW*#R;A\mDRMR4HG`$O1K(g`c8[q74@K7"99YG\`1bRQ
%=9sBP,aS:5))KrZnQs$Y4O/afI;o8Q/4)'b86Z<9#`Gl00[]6C(bj[-@.8*K5iZ8`#[MDm"Ko7Pet0nQ'1,h[P@,A!AFC7[\B7CV
%ASC4S+b!QJ;^K^C>g65/2mIXCIc(C('Dt8XNaOE`&0uu3cD5?a%XemtpTrS'Mar"<@4Q*kI$91YeG>Gm3plK`c?9g\isROgZl9-E
%bVMBs08q]CP,<tt*C34X-Z94F[tp*<HF^L\5&61&)bAU;1p6W]fjCEk<eSKK!rT?1DKjfFPRNq'])`>Cl(92hZ6,l\Ble!*[8h$!
%ACjU8QhC`9Td7BZ37`SP2MLU#a"@Q1.ldtk)4&\?FgLAKo3FfRC*O#jGjm=]+m\ne0pL&tX-BX;k?SkKZ80;.&'TTflH>SLJK5]l
%5g1/3fk?ii+3kZ5h]&ojmtFd@On??%r+NkKhCb2\108Uj"p9Ch%caN0,]0!I9nF7#g]pA2(_4:bW]E18&i^cML'`GL;4.r:=/KJ3
%^(;;HY-90N5ZcHQ)/7$179F@iJS:AN]'),$iMB8rL_$ChL:c56FQtL$pK8kBo>+`Lquor1HCJXbM&!RHfDY46,%McD+3_OpkL08S
%qZQg3@_c1)O'K-d2_KTc_pdjU0,f%h-fKMj>Ad48rG.&Wq#nIg[c1-qj)*ARb=+)L_%EP*X/SmF-;32seZXWGY"315r80E/nSkD1
%AMrlVlbI=!peUarRP[$dD@DsRUP[m6KBc@SlY^sX6K1AEq]F]*:dX"9nuP$J%LQ.$p\@cR-c%[)!D?kos2A,YKS`l:#Yekp`i-YZ
%f9T^D#Xq-&&9u25=\FqU/EHNBW0,KVA(ZZ8Q#NjHeU6abe$P(hi-bPDLea$Z(/T%d?PZ<)"#(X9E._q*J3]W/h%/1JKR%c+j;hp0
%eR@cIpET4P^9qJ>Hp9\.PblW#VSl*`8:"8,Au=g-g\1pa`+Sb$Badu#N]0ri8-Q)%n%?\&q0,'!?U!!m&"Ir_U*TsPVgsa1gkX$t
%,-<XHnlq<s%C#*DkD-;YD7U:6&A9+NF?OGd((/Q#e&_Z:n4XqK[]Nt<&=H%=$Nu--pj/<H%$fW4n?:]siGZ)G'nL.^$4dE?hYZLQ
%0p!J@COaI`hRj!TJf'+mAF&E2cqG,9,OZY*H-P:i`bR>g:!*^>+\SPP.`<*)lkb_e[LC2`;3#gmfTCBJ8_0R5jA\8lhC[F*"ZoF$
%iE7J^3&t%f'o?U'oYp`I<=ZoQ/U.Mu]21/^:q>1;?uU$Ld.)!<]XXefn7$Y>NrG_HrM]6l>g%lCbtq*\`I\QV/iRhh6,5eF^Og#E
%B"iDu0HiPPkLrAUKTMg\'*h#aEcBY]Jk?G@jCXu;K"^<'SrL_a[+N7K%Z#)5J3`F)2gVUnX;N=q-^'o7GKC,>onOtOc7^doU1+IX
%k]V:.%=USQ\YAL,Q^Jo)]f/4-m8c"`7Ge]>6?a5r[XBYnr`=#B$-pf-GG>npYOc8[/ui6Z-4=LN.%'Sj`+^'.)teKGa$>bI1Z-s*
%%NcN8S5FrRAD^ft"aQQ@7DMh?gY(r58dftO9oc'4MHLj[iM0\&%'%P"V(.6V\LSL+69h:3@8#FncGXY&?,Y'gR&-"kUguArX]n(G
%8A7-4N:4-u(X]r_V3A3>pH$`@SKE'P?kL&6@:_nKlu7u(7I@gQ&ThNUge.EZqR\jMSi!&[?NDp57nqgB&2j"."FODIe8tA3Fg!<j
%pNtHkUYh!naq/D^h-W-@`]8TPekHQlTZL0QmACtL.4gHfe-@6"bE?+`]gX09F$#B;W,KcKB"-lc%7CfG^AMe;mH"oH&F<EI=WmYq
%c.[.)9H])2Xis57!#CN!)47bdJ+1^jrUb+5-!c#>od:+d<%,=&b#*i=`ReY`Q]o&lhBu^3,0,>1F.0DZk#A2qeQ7h.HXT`Z2ZY4L
%*5TFq0S93pDMY4m9/W]d7pWdZNgoZ^M'*$A6hC&@KR0k*(RPHbMtbu%gh#0r`aB]LU?mXQT"<M]O5<1(Sb69aU($;>mG8=t3phYq
%r(bg*0-fd"c@&Xi2(uOn]qo]#)(\0lZj#o/DS+[XJeEMd,&1gD+9epa?;mG#LhL38p8DMa.%AUP;"58PQ*T;@.rq8-eL9iEB_d1B
%TrZl4Iderk1-u,^CBWTB50I1?<p4/%);+]3G"h@2UBc)7s6(RpdLSl5#"Y!k!pb)1Z>67!"d=HYr-O&mEFMegM8j)>6U4r,)`0(_
%.9->5"tDhg7.4J0W*r%_>dgF4^]Pf:`\m2Gpj3=!E5dJOI7)na7:?aCeZ(A!=eV\j%FKD.aR\!]'sd(G>]euU(heW@)5!bLA)O)a
%\'2h#4nOuW=N8c?&]]1VpWB932N/dLIoHe%9V6#.Y*FD7Wig0%gHTL'mXksG]I1HA7+pN81qc3cHef@F`])QAIl9N,:cmt6+*R[;
%jV7LIccRLPi^U3@-]@JZZl@66p,'s@TiNH[DrhEVEPo-9nc"*.JUN#$O%VH_8aZj"H-ptEO2EQ.iM2nq%`jUCq,?#9=imV1p7dBL
%-,&goQ"a&/K+EoF46UC2%Zr/%6NoK4*B1cH=t$ckW0MRg.YmAnk*QS/@q<eRg9$rR))MV,5OtM5B`-g:_DqJk!%2M&%sL87nKTi6
%f:@'5M:!eY(a5MKH]La=..h.-*o%rK5N6QH>eMNlN_LN*KqpsBRpm`@VRF5gk.P06`<gNC=eAk>0)I\Y@CNo@\,bFOqoO*pEF\"5
%I/^G-lCDfPdbu8ckNE$&V6pccaKfl^h1sV+Zo.;[,So^JYsJEd;%:%KOtg]d4s-<F&H8bSnX6QR$01S3M]&j0?jM4^hXEH#n%H7d
%qn""F(";hG>^`ff?^O%^g-jP*D"Z,[P6oh,V-(g:\KD-9#.icWBm:$'eJ-]B?qR*AZofJQF0+';A#>^BmjMTAKmr-YiYpKB%(Wg'
%b@M5Qh"q2l(EP0-LTq+b97%6=0Qg@e$AtEq%7<,(IVN$fW\CE^,:coJ6M/R=k/u9jcj<O>_/[*9O5#5<S$4i2!2ci1\!sH\4"a_W
%*J,lTn]"`e(o+(-m!aF`$dM[uN!G;aQ93*.nY?D=VX\&b*sQUX2^n/b=u$)&:iCIX0'Wmf9bYV9jJ]gHdg%l9McB`bOe(eU.FR5q
%XG2[Wq<?Er#%e9olWE#;Gt9,='\S'\eT^\j^UMj<]'rIq*;&n`C_m6dmsREg;kY&^`SCMS8ruQl(^qfa3pt!S7?gd7\=X2a7:B#g
%]A3s+<5KA70P9k[bRI$d-cNZlSoZf>kLQp[SQVK5#jCXl0GkVOZ&*>S>8SQG6%,'82$-R\jsOTHducY8hkUT;Y=E`P3pM,lb63Q(
%*\-qSPp"ROA*q['jONc9Zu&(\#"?[HP@PKdbOBI)cFt[On8Cimh9$8*<'6+&2BUrpr3`[4neQ-Bo==eZS]`)gZ9p7KV1%Lao(q_H
%dog4J=r;=k@ncE/Hh?[B(u@>#Q"V>Q2#Wd]btqe-P1pIQKH9V.p[aET&>r*<+n$@GWU*tS)8"cZ6f(WFSB>RI,_;Xm[Np[1"[7@s
%7Q[XA6,V?4WnD&-o>474%(bA&(o&u;)5#DF%fQ+[+uMKq_lts-G)GN;2S/tVm,&ZRc"%NrODFGA68ei.E9^-N4KaWW2Q,Ga)N1*4
%2(kdo$sY^Fo!nWj]afk2]<T@->a&gmB:BE,m0&82ZY?jr*GsO]$-6'6]pB?K(l,M7\DIND;LX/^;N^+RllI!`LYTLeE_%/"iPoS?
%&/Z^>JApQMbd>FQa*oXD^Xa]1GWD7sf#.21:ugO6>cWI2_q`BoRqXCj+0Dg6KJ$!e!*l&NpM!rSpQ(>d5l`3M**8Bp2Kp9]EM_"m
%+@VEW%*uaudA,KsDd%=VKi,g&>WleIE#cZRkhAaBGpSHPGSFVhSpY$A;ke2ajNH5a',oYq#j15N:RCW#T;;:@Xm%fEftqXZGP0OE
%S>%!X046&GA5'VceEb`rjI3c9@#9nHXC=q_M@r>Da--@(cdEHpa*f5+4?Fo`^=Cm1MfhD7"`lWP%De/s7+D^,k[^t?d29b2k9P]A
%@)EMh<Zkf1,>j/X/7Kj31SlCA<%9>/3?&.[om-;qZaA8PkpSm$9AAQEp3Aja&KUtieoPAS.+WdS?`pJ"!2UQ3g[f-4P4gYi46G-/
%VFCmC=Zo3^<qe0"8Xr)4?qmrRK.\oWBOm("keNacSSaGaYUEQXp;Dn'F?"@3R2]!hH>UmRB?6p?3BkVG2&C"Adl*rZ'Y<&_W2V4f
%rT1q;e(seaDF2GcdGnYM.dXJo\1R-6)LC2:f;r3<A.>dVg-teP;@V>n6QZ!I9r!4,qMBUsE9ZE6fP8(N6L)%p<hpiFeE=J"&JQ)V
%T:bJh>U6a\e($iK]mu(='C*:?S/rG?k,%T_hEN%fPMf"ne/$ZI0cEL2-uS3eNb6(C(p2Qp^p2Pj8`-k9pt(*_!SL.qZ'HhSbi()V
%GIulHVOdE%r6dR:h262L97Eua(5sAR/bQHtJSAs2J(GOCTPYou"/->I!F+E)jPVo"ACjW+O2'duB&!)Zah*78QVdlOVOsr("M`3)
%bJ!,X2>B"3kf)Gg9hod-QH-t,Uj#TH75um2$ehNIr$:=:(n*PHG`EW>4K;3_],qW;YRcXES7Ar@V&Q0`ZDFqq=h<B>qKR><+X^n_
%/I4Qkp5cT=d-Jr^?,/RcNtN":iNP7f<^8N#^c4H921$B&UbR#peX$ke\4K7H0.K5i]jrun7Mm#Vgmdcu?9/X5;+GVFiMu[,KmF:b
%3#pn=dh*Q@IZ?`j/F'Z#bC3ef([Xdc7\RSOn"#Zt`,9LJs.;st`LGhs*m<<:qkl(g"C/Y]6&MWj<1.$n5#fN;!:7&UUMsA<-7rOA
%M4-1P(ZXFE>/-S=T7Q)jXJ-3Z4,VWJ6mo\Ej^bQ!(UXjIDapPU_mGTD-MIkoK3_(SL!P`L?mLOM>eBeS\Emh%,4>)T69aHtrjZJD
%oNC>G?6fKio<g`ELINSR#3]NXJ;RV,^/T6Rb/b)]KsF*':Ci46C:nHWYiuV`n$e]Q_c@q,[#)'p(':+8^l;.d"Fo1T_oHtlR_A*A
%QdB";.<ru's6s;dno`OboDe\aP2fHF]YJ_gP4OEVT4e(bP'fND&EI,h.jb#3'Wk=i9M@YQ:f7"8D<@hj5e\^g^=qEHVAS'+`Z]h&
%U[;rL&@Z]QE%p78McNV3HNF0DD+7:ciM&p%`L*J^s1TH>muNeu4ad)UDtN2hIpR<]A_.AWnk#2(nuU\Xfn"quBA2O[loqe>(t)g@
%cR8jkT<IVg]PgqA:gqE=N!I!6La&FMG)RXJ:rh,(=;T^.ok$uh]n<_3ZGRh0cLo[<aL(fRHj/3imuQ'`*^+r'dH59nr4Lf;QWo+*
%qmSfO3iEVDM[/T]+M>P-'l\A\&:E<N=;/Wi'kc3$"cH,7jJ[:("8-!Hf4ItcG&`/[<.#:20rbtc:=!Q?,.I#U`7%!f"-4(&66-LD
%MC-ofJ8[+/9ZTKCO=c"Pck?m[8G9R:?nHYg^+di2C5UYTM"mCFcc;?[RpKS>_s74R.Meh8H[W,,iE3J0hB>jWH7RiU9tl,boqs'A
%2`G&+S"Q8/@HY%FW$LSC8,ZDq:Di-%r(Z$_-kCWsNalgN0Cch-.(Y;9il/05&aH1Z8XKWc8[<OKEG7KaP,FSa"/+"(-o5WMEClY9
%NI>(;jg68FO`ppU2`X,"]3%SV*q"3gdhW)]OEjIJDr)tnTEBMS[Ni4BMJaQ.,m!Z=YAG#=l.]=6G3C$3lL=$"(o35sc1+IK>jOp8
%$oNj#R]`ZoVqL5dfa[5sJ>3%Y3FP9mSfD"UOOnFr]!^K70p?&.r*eE>..6`EVn6MlC!9Ka!3m?rj%j:$Lojgu)a++"-h#"cORN-a
%Hr>J;WA+2@n@Eq4g+QYng$An/mn[OL&a+qm2N]iUYb,8f`[?2NIbWoAdqA&KDgL@)ZhJS8P4^g5'Wu=de1TX.oJ8IRm1<1,(cj9J
%d&RO9=R&Fs?-+N94Tn3)H'3$P*J1$56So/(T:R?o<PE5@ACN,SN+Uh`ML!UL!#l_-?oF(mm$HOhT"aK'o!SpT?9[Q6UD1XBE)R1@
%`P+!EpDGNS&%sED:/?m`'t*Z)[@PgadGbt=#lL-M@uGe-)6'3ejtn8UXEAMFN"\"SX(G-s]n<qfDEf,?;mV10C\@6=h"[\dP/$MN
%iT&B^c//03cR\FrigSCir\UmJq-m=e5B'#Tn:Gnsr6G#L:2k>q)"h34\.VPXV(\,VbDc;Jnlo2;U11c6ZR=dYq46lm3]T'EXJjT0
%>V*Y=$_JJ(54-kdD*Rs2r'$&#f;W(]?O@JF`9Zl%/nuZ<hmpaT;*19G8d.MD['>=rH\%Ktjg4>G0qY!S5Fr$p4N>Q6:U\_8m;2J8
%e[`qQofE'Nq3lJUfDY(3UV,"/n,I[dI2:GAOg<MVI\t<V)Z68$ai?^jHH;Cu>n[i[!F<iZYT#$8JLEH-"+)<n][pU%EdIH#if#F`
%`*58n]:BHuqU!EAaAM[]Q9o!Ofn^VU'Lq<'^4qBM<?6DR(-a'i4<#F1V3Q(PN]ef=f7Qq@R(39WZ#%NI="j\]$38;`0),Q8<;)tM
%:8hD"LsUKlH65WAMVth<#p*3F8MTn[jlHKUGZ;Tr4q+.elU2#IGlq?RckM<W"t8i"8%$hWGXi<Qidd/:eVls9Yh$nX]S/O='c7IP
%=B&9#Ka/eUHXI"S;@?HN[EgV`@&"fR$j/0s"K47(m[V1f!^L/V!+WRk>q^&STW'AKU`YL1lZPr1</^0_h5f`DL)Yd_W2GOl'@7V$
%QPQ\'5eDYE9/1%JI=7ui@#5(4WhenFlB*265^O+HTNs@Pnm/=oKkCuJ-K_jk27%5*OOA\"rYRRHLn'+mf\2f"E(F5X[g,+mLj["g
%flihJd*_q=iFgD4.#+;[Dq*69jV<l1*nJf9e7k@`CMP>/d>$Ik*jFT(+O1GBnbZ.QbIQB;c8>+FBH7J^F!"Ho2\U2[m`<AYAkS*9
%D964AYa8ns\HXYNp2DpI83#lh#&j17-Q][*`K+'lZIVr8>.6RkO$s#WZ^q%'=TT,JZ!8^1XrKoR_P0Za%(&:%4WPYSSu4TL!EQ`X
%Ha`"kc%Vfkp:XS#XH1m3\4^X2K:.)mf(FAWR1t!n8)KB&n&rDY0+W8RkOB4U(+C,pd47kbH'/GkE.ik,-YobVNgp;;[2S]J[aib`
%L*2X0!_*6]bR5F_)b\Mh"99g"mF<b%oct(0T=?T;/nm2M4iR\ON3i&rHSOr/1Hh7I^FYCa,f;%>QKg+'Ki&jl@$ms#V(p%@d7N%/
%4_Y2ChVI$LjlSa7QY0B;>VNe\=^C:(,R\GRZs@j0l'XCa]Nt5bN7Jfd:Mq;g*_pt5jCt2N=UKV:N^G1YH;\ZL#A$Dfe"KogMh&I5
%^b+/1Fg,Ro9$VEPX2CR;nk(uVMpJ=%_!0ZmE#/cnR!rSk.Io\qS:_J7KS#FGWb$Kd+Qi/N:I1<g!3/8@oochK@<W,_/%41u_9"uV
%Xc7(2IZ,N9gkL#,oM9[NLd-h*$FdugNIo0EHV%(YN&BssNfE8b&47km@;r.p*cd;'-l[_@Uo]0Wc+Z*o8_N*n(dc7Q,ObGI[g/Mm
%$TrjE6Q`#l,*K<H@A7DfM^g%eV4,$YU[foAb[-Kk'/,h[N$/EpQ[3P=&8g*?0!EfZ#"2gZH4D3Ycc-@t<:(0.F$X4kSu')mo+`Qn
%$smd6=In:qbi&p2_@,L!!jg\X#*<LPk<7kHiAKRh+8Bq1O9abdSX+K>rA]r916A32>+'FbPgfd!P%i<r(IK45=ik22gu,F)IQXnc
%XNFkUkVQ_oH+7Br15?m:QI23mT;m]p11Vol:Pbgr_m9Wd:;'V\H=4)-[i&#>MIu1;9ZYikrHJHnNX]Y+7"_ri>Rd]Xd%L8,LBl)Y
%%kV!X5&qP=Gd\Q'Jr]=%)/:hR7iC@gkaGJVs#r(GO6X"rG&GsW^!('>SC&20eoq553PaFhb`P`;6_>+[El,+0E7(@O"3-_6Mk#ai
%>@B_:+j`f%C@3rb>p1O5XP)@ep%,jdE1,`g?RK'tb$3=(0jTI,YtVDLfDVu*o-tKcb'EQbh7?r#TmAKRQ4/VpZq><GcDjs'kTjKc
%TS=YiT>k*HRAsNmH/:"Q9=oUGU@trWR`/C$TpH=Z/\*LL%[JYj"J56lmK(5^lpP1"iMQ$9[eIG$4H>+crI#?U7`I/!ojat7k"&$b
%)*qf@k?&@"%&R>IN[JI4db<2drWZ?HHN1M\!2[rHZldTcWimeBZH/J_q&QdpIDG1gj50-L\2uj$nn#`o37Sp-(naBpR-QqbGrg/n
%[q!"G4LP5(Pl%%`+2sb9i1aQ5pU)B2aic"8_O4;[Wq9r3-aAcY>DUbr92Hps_Mn(LF&T@^`6VDF3k*9bHKe",_[!WMb;ElnM\#=^
%\Kk7bC,u+>7L<UE7@oWsB#\Xqb@&.*^=s#K?=[CDe%Qg8q#7)O+2tTT(V*SuZ)F=GJ!SoKaobauZHhekj->T;b\_>@X&gkG'L8&:
%T+h*g$ONr!UREop=u"t3lTm?KlF,3@>!sGhOXbWkQq:592b5-k`R$P.ZJgKTlAIGBB01F:$4$b&a6hi'+1s^,#bS<l\bm#1i_STL
%-)e`mcbqclZ9N-N$6kL=d:29Y#>AggN'l8\-.8,r&tpc\C+!LcG<=VfYc:'5g2=hgN9Kc&NOXg9mGYpB/Vgr[7Im=#Ln]#E)-"n:
%lGgEEI_&Y+m3OL6KFKUnk7O_;C>\92*C0S^\Y9QFWCV:I$gMk8Al+MV57]Am*6E-sW5r#/QuKOtN=488@lp6@:;47X%Xr=`'kOa6
%W<ad)lr:e"3]*.fo+sT%g<&>:7E#EleTu'`#0R5022@WD(bX66@]c<XW`7>!)cZBd+C=-F:'SDkj3*kt)OiXlb/gbm!;:GjGVNA0
%UZkn/81IUX>B7LncZP^8:i38&q$)9RNMRZR6kVJ&Rt=t!;bPsVe0`eZW,@ah:<^-Q6#XHQp#tg'b+O2,r9htCWt+p.`?riu.05@7
%d7req)J=usQo)`#:Hu$U*1A](BF/nmUKF4pLoH\+4Yu2.?MsZT?/nP(hR3%(dL<Y?kN[#l*#Q.D2VpT[,Q"EPQO'74(+i,n-WUAs
%\U$hB3rHf,h7[GQWIhn<'Xqc2aR]"\K8q0lCDG2G7e(4F1_@e(bY+/F$teAc!+%o$^LQ8gGtbmGil$c8LJ>E@p;Cb8S9T0P]Y5a7
%4iNb"h@H9lZ;/NEFP)2cO:ViF[Oig7,53.!ghsg71`>W'F/PiIMgXg`4GS1L'(t%7D+ITj_5S8iRVbW9IqJ;e?TY+Aj(fb)[l09K
%'T227kBjXg_L3ScfT42u==>DVS$?)aGo:]jOHBI^SM']M4=gUOWq?)%X<ICK*cc^=N+-u5E#icR8f8"Lf/=u%O0'-SUdkT8@"4n9
%AD?)pg-;**RGr_E<+6rYk]_A[dqtWoarp3sB_DX)@\Xe6*rU7;$u[7Mog-0/AoIK?dU(hsK-/FWHE4c5T%spkH+aXdo[!3>^\ZFJ
%hL,;#2rD>q[1'hFT3qWtRt(D1lTb=;RrA?+msb;'YJ9tsiTi`,#s\=3^T[\%iV25Yo9[5kq:fg/rpkR<r-r.k+72;f`@l]55Q:!+
%s5!\[c?+ES~>
%AI9_PrivateDataEnd
